    def _create_courses_tab(self):
        """إنشاء تبويب إدارة الدورات والجداول"""
        courses_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(courses_frame, text="إدارة الدورات والجداول")

        # إطار العنوان والأزرار
        header_frame = tk.Frame(courses_frame, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        # عنوان الصفحة
        title_label = tk.Label(
            header_frame,
            text="إدارة البرامج التدريبية",
            font=self.FONTS["large_title"],
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, padx=20, pady=20)

        # إطار الأزرار
        buttons_frame = tk.Frame(header_frame, bg="#1E3A5F")
        buttons_frame.pack(side=tk.RIGHT, padx=20, pady=20)

        # أزرار الإجراءات بترتيب منطقي
        buttons = [
            ("مسميات الدورات", self.COLORS["primary"], self._manage_course_names),
            ("تعيين مدرسين للدورات", "#17a2b8", self._manage_course_teachers_paths),
            ("تنفيذ برنامج جديد", self.COLORS["success"], self._add_training_program),
            ("تعديل برنامج", self.COLORS["warning"], self._edit_training_program),
            ("أرشفة البرنامج", "#6f42c1", self._archive_selected_program),
            ("حذف برنامج", self.COLORS["danger"], self._delete_training_program)
        ]

        for text, color, command in buttons:
            btn = tk.Button(
                buttons_frame,
                text=text,
                font=self.FONTS["text_bold"],
                bg=color,
                fg="white",
                padx=20,
                pady=10,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=command
            )
            btn.pack(side=tk.LEFT, padx=5)

        # إطار البحث
        search_frame = tk.Frame(courses_frame, bg=self.COLORS["surface"], height=60)
        search_frame.pack(fill=tk.X, padx=15, pady=(10, 5))
        search_frame.pack_propagate(False)

        # محتوى البحث
        search_container = tk.Frame(search_frame, bg=self.COLORS["surface"])
        search_container.pack(side=tk.LEFT, padx=20, pady=15)

        tk.Label(
            search_container,
            text="بحث:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 10))

        self.program_search_entry = tk.Entry(
            search_container,
            font=self.FONTS["text"],
            width=30
        )
        self.program_search_entry.pack(side=tk.LEFT)
        self.program_search_entry.bind('<KeyRelease>', lambda e: self._search_programs())

        tk.Label(
            search_container,
            text="(رقم أو اسم البرنامج)",
            font=self.FONTS["small"],
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(side=tk.LEFT, padx=(10, 0))

        # خط فاصل
        separator = tk.Frame(courses_frame, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول الرئيسي
        main_table_frame = tk.Frame(courses_frame, bg="#FFFFFF", bd=2, relief=tk.RIDGE)
        main_table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 10))

        # إطار داخلي للجدول
        table_frame = tk.Frame(main_table_frame, bg="#FFFFFF")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)

        # إنشاء Treeview بتصميم رسمي
        style = ttk.Style()

        # تكوين نمط الجدول
        style.configure("Programs.Treeview",
                        background="#FFFFFF",
                        foreground="#000000",
                        rowheight=45,
                        fieldbackground="#FFFFFF",
                        font=("Tajawal", 14, "normal"),
                        borderwidth=1,
                        relief="solid")

        # تكوين رؤوس الأعمدة
        style.configure("Programs.Treeview.Heading",
                        font=("Tajawal", 16, "bold"),
                        background="#1E3A5F",
                        foreground="#FFFFFF",
                        relief="raised",
                        borderwidth=1,
                        padding=[10, 8])

        # شريط التمرير العمودي
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical")
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # إنشاء الجدول
        self.programs_tree = ttk.Treeview(
            table_frame,
            columns=("number", "name", "start_date", "end_date", "category", "subjects"),
            show="tree headings",
            style="Programs.Treeview",
            yscrollcommand=v_scrollbar.set,
            height=10
        )

        # إخفاء عمود الشجرة
        self.programs_tree.column("#0", width=0, stretch=tk.NO)

        # تكوين الأعمدة
        column_configs = [
            ("number", "رقم البرنامج", 150, tk.CENTER),
            ("name", "اسم الدورة", 300, tk.CENTER),
            ("start_date", "تاريخ البداية", 120, tk.CENTER),
            ("end_date", "تاريخ النهاية", 120, tk.CENTER),
            ("category", "الفئة", 150, tk.CENTER),
            ("subjects", "عدد المواد", 100, tk.CENTER)
        ]

        for col_id, heading, width, anchor in column_configs:
            self.programs_tree.column(col_id, width=width, anchor=anchor)
            self.programs_tree.heading(col_id, text=heading, anchor=tk.CENTER)

        # تكوين ألوان الصفوف
        self.programs_tree.tag_configure('oddrow', background='#FFFFFF')
        self.programs_tree.tag_configure('evenrow', background='#F0F8FF')

        self.programs_tree.pack(fill=tk.BOTH, expand=True)
        v_scrollbar.config(command=self.programs_tree.yview)

        # ربط النقر المزدوج لعرض التفاصيل
        self.programs_tree.bind("<Double-Button-1>", self._show_program_details)

        # إطار المعلومات السفلي
        info_frame = tk.Frame(courses_frame, bg="#1E3A5F", height=60)
        info_frame.pack(fill=tk.X, padx=15, pady=(5, 10))
        info_frame.pack_propagate(False)

        # خط فاصل علوي
        separator = tk.Frame(info_frame, bg="#FFFFFF", height=2)
        separator.pack(fill=tk.X)

        # إطار داخلي للمعلومات
        inner_info = tk.Frame(info_frame, bg="#1E3A5F")
        inner_info.pack(expand=True)

        self.program_count_label = tk.Label(
            inner_info,
            text="إجمالي البرامج التدريبية: 0",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="#FFFFFF"
        )
        self.program_count_label.pack(pady=15)

        # تحميل بيانات البرامج
        self._load_training_programs()

    def _create_archive_tab(self):
        """إنشاء تبويب أرشيف البرامج"""
        archive_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(archive_frame, text="أرشيف البرامج")

        # إطار العنوان - بنفس اللون الرسمي
        header_frame = tk.Frame(archive_frame, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        title_label = tk.Label(
            header_frame,
            text="أرشيف البرامج التدريبية",
            font=self.FONTS["large_title"],
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, padx=20, pady=20)

        # أزرار التصدير
        export_buttons_frame = tk.Frame(header_frame, bg="#1E3A5F")
        export_buttons_frame.pack(side=tk.RIGHT, padx=20, pady=20)

        tk.Button(
            export_buttons_frame,
            text="تصدير الكل Excel",
            font=self.FONTS["text_bold"],
            bg="#28a745",
            fg="white",
            padx=20,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_all_archive()
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            export_buttons_frame,
            text="تصدير المحدد Excel",
            font=self.FONTS["text_bold"],
            bg="#17a2b8",
            fg="white",
            padx=20,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_selected_archive()
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            export_buttons_frame,
            text="استعادة البرنامج",
            font=self.FONTS["text_bold"],
            bg="#ffc107",
            fg="white",
            padx=20,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._restore_archived_program()
        ).pack(side=tk.LEFT, padx=5)

        # إطار البحث والفلترة
        search_frame = tk.Frame(archive_frame, bg=self.COLORS["surface"], height=120)
        search_frame.pack(fill=tk.X, padx=15, pady=(10, 5))
        search_frame.pack_propagate(False)

        search_container = tk.Frame(search_frame, bg=self.COLORS["surface"])
        search_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        # الصف الأول - البحث النصي
        row1 = tk.Frame(search_container, bg=self.COLORS["surface"])
        row1.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            row1,
            text="بحث:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 10))

        self.archive_search_entry = tk.Entry(
            row1,
            font=self.FONTS["text"],
            width=40
        )
        self.archive_search_entry.pack(side=tk.LEFT, padx=(0, 10))
        self.archive_search_entry.bind('<KeyRelease>', lambda e: self._search_archive())

        tk.Label(
            row1,
            text="(رقم البرنامج، اسم الدورة، اسم المدرس)",
            font=self.FONTS["small"],
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(side=tk.LEFT)

        # الصف الثاني - البحث بالتاريخ
        row2 = tk.Frame(search_container, bg=self.COLORS["surface"])
        row2.pack(fill=tk.X)

        tk.Label(
            row2,
            text="من تاريخ:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 10))

        self.archive_from_date = DateEntry(
            row2,
            font=self.FONTS["text"],
            date_pattern='yyyy-mm-dd',
            width=12
        )
        self.archive_from_date.pack(side=tk.LEFT, padx=(0, 20))

        tk.Label(
            row2,
            text="إلى تاريخ:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 10))

        self.archive_to_date = DateEntry(
            row2,
            font=self.FONTS["text"],
            date_pattern='yyyy-mm-dd',
            width=12
        )
        self.archive_to_date.pack(side=tk.LEFT, padx=(0, 10))

        tk.Button(
            row2,
            text="🔍 بحث بالتاريخ",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["primary"],
            fg="white",
            padx=15,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._search_archive_by_date
        ).pack(side=tk.LEFT, padx=10)

        tk.Button(
            row2,
            text="مسح الفلتر",
            font=self.FONTS["text"],
            bg="#6c757d",
            fg="white",
            padx=15,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._clear_archive_filters
        ).pack(side=tk.LEFT)

        # خط فاصل
        separator = tk.Frame(archive_frame, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول
        table_frame = tk.Frame(archive_frame, bg="#FFFFFF", bd=2, relief=tk.RIDGE)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 10))

        inner_table = tk.Frame(table_frame, bg="#FFFFFF")
        inner_table.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)

        # شريط التمرير
        scrollbar = ttk.Scrollbar(inner_table, orient="vertical")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # جدول الأرشيف
        self.archive_tree = ttk.Treeview(
            inner_table,
            columns=("number", "name", "start_date", "end_date", "category", "archived_date", "teachers"),
            show="tree headings",
            style="Programs.Treeview",
            yscrollcommand=scrollbar.set,
            height=10
        )

        self.archive_tree.column("#0", width=0, stretch=tk.NO)

        columns = [
            ("number", "رقم البرنامج", 120, tk.CENTER),
            ("name", "اسم الدورة", 250, tk.CENTER),
            ("start_date", "تاريخ البداية", 100, tk.CENTER),
            ("end_date", "تاريخ النهاية", 100, tk.CENTER),
            ("category", "الفئة", 100, tk.CENTER),
            ("archived_date", "تاريخ الأرشفة", 120, tk.CENTER),
            ("teachers", "عدد المدرسين", 100, tk.CENTER)
        ]

        for col_id, heading, width, anchor in columns:
            self.archive_tree.column(col_id, width=width, anchor=anchor)
            self.archive_tree.heading(col_id, text=heading, anchor=tk.CENTER)

        self.archive_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.archive_tree.yview)

        # ربط النقر المزدوج
        self.archive_tree.bind("<Double-Button-1>", self._show_archived_program_details)

        # إطار المعلومات
        info_frame = tk.Frame(archive_frame, bg="#1E3A5F", height=60)
        info_frame.pack(fill=tk.X, padx=15, pady=(5, 10))
        info_frame.pack_propagate(False)

        self.archive_count_label = tk.Label(
            info_frame,
            text="إجمالي البرامج المؤرشفة: 0",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="#FFFFFF"
        )
        self.archive_count_label.pack(expand=True)

        # تحميل البرامج المؤرشفة
        self._load_archived_programs()

    def _load_archived_programs(self):
        """تحميل البرامج المؤرشفة"""
        for item in self.archive_tree.get_children():
            self.archive_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            # التحقق من وجود الأعمدة المطلوبة
            cursor.execute("PRAGMA table_info(training_programs)")
            columns = [column[1] for column in cursor.fetchall()]

            has_is_archived = 'is_archived' in columns
            has_archived_date = 'archived_date' in columns

            if has_is_archived:
                # بناء الاستعلام حسب الأعمدة المتاحة
                if has_archived_date:
                    cursor.execute("""
                        SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                               tp.end_date, tp.category, tp.archived_date,
                               (SELECT COUNT(DISTINCT ps.teacher_id) 
                                FROM program_schedule ps 
                                WHERE ps.program_id = tp.id AND ps.teacher_id IS NOT NULL) as teacher_count
                        FROM training_programs tp
                        LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                        WHERE tp.is_archived = 1
                        ORDER BY tp.archived_date DESC
                    """)
                else:
                    cursor.execute("""
                        SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                               tp.end_date, tp.category, 'غير محدد' as archived_date,
                               (SELECT COUNT(DISTINCT ps.teacher_id) 
                                FROM program_schedule ps 
                                WHERE ps.program_id = tp.id AND ps.teacher_id IS NOT NULL) as teacher_count
                        FROM training_programs tp
                        LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                        WHERE tp.is_archived = 1
                        ORDER BY tp.start_date DESC
                    """)

                programs = cursor.fetchall()

                for index, program in enumerate(programs):
                    display_data = program[1:]  # تخطي id
                    tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                    self.archive_tree.insert("", tk.END, values=display_data,
                                             tags=(tag, f"id_{program[0]}"))

                self.archive_count_label.config(text=f"إجمالي البرامج المؤرشفة: {len(programs)}")
            else:
                # إذا لم يكن عمود الأرشفة موجوداً، عرض رسالة
                self.archive_count_label.config(text="لا توجد برامج مؤرشفة (العمود غير موجود)")

                # محاولة إضافة الأعمدة
                try:
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN is_archived INTEGER DEFAULT 0")
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN archived_date TEXT")
                    self.db_conn.commit()
                    messagebox.showinfo("تحديث", "تم إضافة أعمدة الأرشفة. يرجى إعادة تشغيل البرنامج.")
                except:
                    pass

        except Exception as e:
            print(f"خطأ في تحميل البرامج المؤرشفة: {e}")
            self.archive_count_label.config(text="خطأ في تحميل البرامج المؤرشفة")

    def _search_archive(self):
        """البحث في الأرشيف"""
        search_text = self.archive_search_entry.get().strip()

        for item in self.archive_tree.get_children():
            self.archive_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            if search_text:
                # البحث في رقم البرنامج واسم الدورة واسم المدرس
                cursor.execute("""
                    SELECT DISTINCT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category, tp.archived_date,
                           (SELECT COUNT(DISTINCT ps.teacher_id) 
                            FROM program_schedule ps 
                            WHERE ps.program_id = tp.id AND ps.teacher_id IS NOT NULL) as teacher_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    LEFT JOIN program_schedule ps ON tp.id = ps.program_id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE tp.is_archived = 1
                    AND (tp.program_number LIKE ? 
                         OR cn.name LIKE ? 
                         OR t.name LIKE ?)
                    ORDER BY tp.archived_date DESC
                """, (f'%{search_text}%', f'%{search_text}%', f'%{search_text}%'))
            else:
                self._load_archived_programs()
                return

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                display_data = program[1:]
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                self.archive_tree.insert("", tk.END, values=display_data,
                                         tags=(tag, f"id_{program[0]}"))

            self.archive_count_label.config(text=f"نتائج البحث: {len(programs)} برنامج")

        except Exception as e:
            print(f"خطأ في البحث: {e}")

    def _search_archive_by_date(self):
        """البحث في الأرشيف بالتاريخ"""
        from_date = self.archive_from_date.get()
        to_date = self.archive_to_date.get()

        for item in self.archive_tree.get_children():
            self.archive_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                       tp.end_date, tp.category, tp.archived_date,
                       (SELECT COUNT(DISTINCT ps.teacher_id) 
                        FROM program_schedule ps 
                        WHERE ps.program_id = tp.id AND ps.teacher_id IS NOT NULL) as teacher_count
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.is_archived = 1
                AND tp.start_date >= ? AND tp.end_date <= ?
                ORDER BY tp.archived_date DESC
            """, (from_date, to_date))

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                display_data = program[1:]
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                self.archive_tree.insert("", tk.END, values=display_data,
                                         tags=(tag, f"id_{program[0]}"))

            self.archive_count_label.config(text=f"البرامج من {from_date} إلى {to_date}: {len(programs)} برنامج")

        except Exception as e:
            print(f"خطأ في البحث بالتاريخ: {e}")

    def _clear_archive_filters(self):
        """مسح فلاتر البحث"""
        self.archive_search_entry.delete(0, tk.END)
        self._load_archived_programs()

    def _show_archived_program_details(self, event):
        """عرض تفاصيل البرنامج المؤرشف"""
        selection = self.archive_tree.selection()
        if not selection:
            return

        item = self.archive_tree.item(selection[0])
        tags = item['tags']
        program_id = None
        for tag in tags:
            if tag.startswith('id_'):
                program_id = int(tag.split('_')[1])
                break

        if program_id:
            # استخدام نفس دالة عرض التفاصيل مع تمرير معامل للقراءة فقط
            self._show_program_details_window(program_id, readonly=True)

    def _restore_archived_program(self):
        """استعادة البرنامج من الأرشيف"""
        selection = self.archive_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار برنامج لاستعادته")
            return

        item = self.archive_tree.item(selection[0])
        program_number = item['values'][0]

        tags = item['tags']
        program_id = None
        for tag in tags:
            if tag.startswith('id_'):
                program_id = int(tag.split('_')[1])
                break

        if messagebox.askyesno("تأكيد الاستعادة",
                               f"هل تريد استعادة البرنامج: {program_number}؟\n\n"
                               "سيتم نقل البرنامج إلى القائمة الرئيسية"):
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    UPDATE training_programs 
                    SET is_archived = 0, archived_date = NULL
                    WHERE id = ?
                """, (program_id,))

                self.db_conn.commit()

                messagebox.showinfo("نجاح", "تم استعادة البرنامج بنجاح")
                self._load_archived_programs()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _export_all_archive(self):
        """تصدير جميع البرامج المؤرشفة"""
        try:
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                       tp.end_date, tp.category, tp.archived_date
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.is_archived = 1
                ORDER BY tp.archived_date DESC
            """)

            programs = cursor.fetchall()

            if not programs:
                messagebox.showinfo("تنبيه", "لا توجد برامج مؤرشفة للتصدير")
                return

            from tkinter import filedialog
            file_path = filedialog.asksaveasfilename(
                title="حفظ أرشيف البرامج",
                defaultextension=".xlsx",
                initialfile=f"أرشيف_البرامج_{datetime.now().strftime('%Y%m%d')}.xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )

            if file_path:
                self._create_archive_excel(programs, file_path)

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _export_selected_archive(self):
        """تصدير البرنامج المحدد فقط"""
        selection = self.archive_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار برنامج للتصدير")
            return

        # الحصول على البرنامج المحدد فقط
        selected_programs = []

        for item in selection:
            tags = self.archive_tree.item(item)['tags']
            program_id = None
            for tag in tags:
                if tag.startswith('id_'):
                    program_id = int(tag.split('_')[1])
                    break
            if program_id:
                selected_programs.append(program_id)

        if not selected_programs:
            messagebox.showinfo("تنبيه", "لا يمكن تحديد البرنامج المختار")
            return

        try:
            cursor = self.db_conn.cursor()
            placeholders = ','.join(['?' for _ in selected_programs])
            cursor.execute(f"""
                SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                       tp.end_date, tp.category, tp.archived_date
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id IN ({placeholders})
                ORDER BY tp.archived_date DESC
            """, selected_programs)

            programs_data = cursor.fetchall()

            from tkinter import filedialog

            # اسم الملف يعكس عدد البرامج المحددة
            if len(programs_data) == 1:
                filename = f"برنامج_{programs_data[0][1]}_{datetime.now().strftime('%Y%m%d')}.xlsx"
            else:
                filename = f"برامج_مؤرشفة_{len(programs_data)}_{datetime.now().strftime('%Y%m%d')}.xlsx"

            file_path = filedialog.asksaveasfilename(
                title="حفظ البرامج المحددة",
                defaultextension=".xlsx",
                initialfile=filename,
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )

            if file_path:
                self._create_archive_excel(programs_data, file_path)

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _create_archive_excel(self, programs_list, file_path):
        """إنشاء ملف Excel للبرامج المؤرشفة بتصميم محسن ودعم كامل للعربية"""
        if not EXCEL_AVAILABLE:
            messagebox.showerror("خطأ", "يجب تثبيت المكتبات المطلوبة\npip install pandas openpyxl")
            return

        try:
            import pandas as pd
            from openpyxl import Workbook
            from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
            from openpyxl.utils import get_column_letter

            wb = Workbook()

            # حذف الورقة الافتراضية
            if 'Sheet' in wb.sheetnames:
                wb.remove(wb['Sheet'])

            # 1. ورقة الملخص العام
            summary_ws = wb.create_sheet('ملخص البرامج المؤرشفة')
            summary_ws.sheet_view.rightToLeft = True

            # تنسيق عام
            header_font = Font(name='Arial', size=14, bold=True, color='000000')
            header_fill = PatternFill(start_color='D3D3D3', end_color='D3D3D3', fill_type='solid')
            cell_font = Font(name='Arial', size=12)
            center_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            right_alignment = Alignment(horizontal='right', vertical='center', wrap_text=True)
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            # عنوان الصفحة
            summary_ws.merge_cells('A1:J1')
            title_cell = summary_ws['A1']
            title_cell.value = 'ملخص البرامج التدريبية المؤرشفة'
            title_cell.font = Font(name='Arial', size=18, bold=True)
            title_cell.alignment = center_alignment
            title_cell.fill = PatternFill(start_color='1E3A5F', end_color='1E3A5F', fill_type='solid')
            title_cell.font = Font(name='Arial', size=18, bold=True, color='FFFFFF')

            # رؤوس الأعمدة
            headers = [
                'م',
                'رقم البرنامج',
                'اسم الدورة',
                'الفئة',
                'تاريخ البداية',
                'تاريخ النهاية',
                'المدة (أيام)',
                'عدد المواد',
                'المدرسين المنسوبين',
                'المدرسين المتعاونين',
                'إجمالي المدرسين',
                'عدد الحصص',
                'تاريخ الأرشفة'
            ]

            # كتابة الرؤوس
            for col, header in enumerate(headers, 1):
                cell = summary_ws.cell(row=3, column=col)
                cell.value = header
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = center_alignment
                cell.border = thin_border

            # جمع البيانات التفصيلية
            row_num = 4
            cursor = self.db_conn.cursor()

            for idx, program in enumerate(programs_list, 1):
                program_id = program[0]

                # حساب مدة البرنامج
                from datetime import datetime
                start_date = datetime.strptime(program[3], "%Y-%m-%d")
                end_date = datetime.strptime(program[4], "%Y-%m-%d")
                duration = (end_date - start_date).days + 1

                # عدد المواد
                cursor.execute("""
                    SELECT COUNT(*) FROM program_subjects 
                    WHERE program_id = ? AND subject_order != 999
                """, (program_id,))
                subject_count = cursor.fetchone()[0]

                # عدد المدرسين المنسوبين
                cursor.execute("""
                    SELECT COUNT(DISTINCT ps.teacher_id)
                    FROM program_schedule ps
                    JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND t.category = 'منسوبي المدينة'
                """, (program_id,))
                city_teachers = cursor.fetchone()[0]

                # عدد المدرسين المتعاونين
                cursor.execute("""
                    SELECT COUNT(DISTINCT ps.teacher_id)
                    FROM program_schedule ps
                    JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND t.category != 'منسوبي المدينة'
                """, (program_id,))
                collaborator_teachers = cursor.fetchone()[0]

                # عدد الحصص الإجمالي
                cursor.execute("""
                    SELECT COUNT(*) FROM program_schedule
                    WHERE program_id = ? AND is_break = 0
                """, (program_id,))
                total_sessions = cursor.fetchone()[0]

                # كتابة البيانات
                data = [
                    idx,  # م
                    program[1],  # رقم البرنامج
                    program[2],  # اسم الدورة
                    program[5],  # الفئة
                    program[3],  # تاريخ البداية
                    program[4],  # تاريخ النهاية
                    duration,  # المدة
                    subject_count,  # عدد المواد
                    city_teachers,  # المنسوبين
                    collaborator_teachers,  # المتعاونين
                    city_teachers + collaborator_teachers,  # الإجمالي
                    total_sessions,  # عدد الحصص
                    program[6] if len(program) > 6 else 'غير محدد'  # تاريخ الأرشفة
                ]

                for col, value in enumerate(data, 1):
                    cell = summary_ws.cell(row=row_num, column=col)
                    cell.value = value
                    cell.font = cell_font
                    cell.alignment = center_alignment if col <= 2 else right_alignment
                    cell.border = thin_border

                    # تلوين الصفوف
                    if row_num % 2 == 0:
                        cell.fill = PatternFill(start_color='F5F5F5', end_color='F5F5F5', fill_type='solid')

                row_num += 1

            # ضبط عرض الأعمدة
            column_widths = {
                'A': 5,  # م
                'B': 15,  # رقم البرنامج
                'C': 35,  # اسم الدورة
                'D': 12,  # الفئة
                'E': 15,  # تاريخ البداية
                'F': 15,  # تاريخ النهاية
                'G': 12,  # المدة
                'H': 12,  # عدد المواد
                'I': 18,  # المنسوبين
                'J': 18,  # المتعاونين
                'K': 15,  # الإجمالي
                'L': 12,  # عدد الحصص
                'M': 18  # تاريخ الأرشفة
            }

            for col, width in column_widths.items():
                summary_ws.column_dimensions[col].width = width

            # إضافة إحصائيات في النهاية بتنسيق محسن
            stats_row = row_num + 2

            # عنوان الإحصائيات
            summary_ws.merge_cells(f'A{stats_row}:M{stats_row}')
            stats_title = summary_ws[f'A{stats_row}']
            stats_title.value = 'الإحصائيات الإجمالية'
            stats_title.font = Font(name='Arial', size=16, bold=True, color='FFFFFF')
            stats_title.fill = PatternFill(start_color='1E3A5F', end_color='1E3A5F', fill_type='solid')
            stats_title.alignment = center_alignment
            stats_title.border = thin_border

            # حساب الإحصائيات
            total_programs = len(programs_list)
            total_duration = sum([
                (datetime.strptime(p[4], "%Y-%m-%d") - datetime.strptime(p[3], "%Y-%m-%d")).days + 1
                for p in programs_list
            ])

            # حساب إجمالي المدرسين والحصص
            total_city_teachers = 0
            total_collab_teachers = 0
            total_all_sessions = 0

            for program in programs_list:
                cursor.execute("""
                    SELECT COUNT(DISTINCT ps.teacher_id)
                    FROM program_schedule ps
                    JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND t.category = 'منسوبي المدينة'
                """, (program[0],))
                total_city_teachers += cursor.fetchone()[0]

                cursor.execute("""
                    SELECT COUNT(DISTINCT ps.teacher_id)
                    FROM program_schedule ps
                    JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND t.category != 'منسوبي المدينة'
                """, (program[0],))
                total_collab_teachers += cursor.fetchone()[0]

                cursor.execute("""
                    SELECT COUNT(*) FROM program_schedule
                    WHERE program_id = ? AND is_break = 0
                """, (program[0],))
                total_all_sessions += cursor.fetchone()[0]

            # صف الإحصائيات
            stats_row += 2

            # إحصائيات في صف واحد مع تنسيق جميل
            stats_items = [
                ('إجمالي البرامج:', total_programs, 'A', 'B'),
                ('إجمالي أيام التدريب:', total_duration, 'C', 'D'),
                ('متوسط مدة البرنامج:', f'{total_duration // total_programs if total_programs > 0 else 0} يوم', 'E',
                 'F'),
                ('إجمالي المدرسين المنسوبين:', total_city_teachers, 'G', 'H'),
                ('إجمالي المدرسين المتعاونين:', total_collab_teachers, 'I', 'J'),
                ('إجمالي الحصص:', total_all_sessions, 'K', 'L')
            ]

            for label, value, label_col, value_col in stats_items:
                # خلية التسمية
                label_cell = summary_ws[f'{label_col}{stats_row}']
                label_cell.value = label
                label_cell.font = Font(name='Arial', size=12, bold=True)
                label_cell.fill = PatternFill(start_color='E8E8E8', end_color='E8E8E8', fill_type='solid')
                label_cell.alignment = right_alignment
                label_cell.border = thin_border

                # خلية القيمة
                value_cell = summary_ws[f'{value_col}{stats_row}']
                value_cell.value = value
                value_cell.font = Font(name='Arial', size=12, bold=True, color='000080')
                value_cell.fill = PatternFill(start_color='F0F8FF', end_color='F0F8FF', fill_type='solid')
                value_cell.alignment = center_alignment
                value_cell.border = thin_border

            # 2. أوراق تفصيلية لكل برنامج (أول 10 برامج)
            for idx, program in enumerate(programs_list[:10]):
                program_id = program[0]
                program_number = program[1]

                # ورقة تفاصيل البرنامج
                sheet_name = f'برنامج_{program_number}'[:31]
                detail_ws = wb.create_sheet(sheet_name)
                detail_ws.sheet_view.rightToLeft = True

                # عنوان الورقة الرئيسي
                detail_ws.merge_cells('A1:G1')
                main_title = detail_ws['A1']
                main_title.value = 'تفاصيل البرنامج التدريبي'
                main_title.font = Font(name='Arial', size=20, bold=True, color='FFFFFF')
                main_title.fill = PatternFill(start_color='1E3A5F', end_color='1E3A5F', fill_type='solid')
                main_title.alignment = center_alignment
                for col in range(1, 8):
                    detail_ws.cell(row=1, column=col).border = thin_border

                # عنوان فرعي مع اسم ورقم البرنامج
                detail_ws.merge_cells('A2:G2')
                sub_title = detail_ws['A2']
                sub_title.value = f'{program[2]} - رقم البرنامج: {program_number}'
                sub_title.font = Font(name='Arial', size=16, bold=True, color='000080')
                sub_title.fill = PatternFill(start_color='E6F3FF', end_color='E6F3FF', fill_type='solid')
                sub_title.alignment = center_alignment
                for col in range(1, 8):
                    detail_ws.cell(row=2, column=col).border = thin_border

                # معلومات البرنامج في جدول منسق
                current_row = 4

                # عنوان قسم المعلومات الأساسية
                detail_ws.merge_cells(f'A{current_row}:G{current_row}')
                info_section = detail_ws[f'A{current_row}']
                info_section.value = 'المعلومات الأساسية للبرنامج'
                info_section.font = Font(name='Arial', size=14, bold=True, color='FFFFFF')
                info_section.fill = PatternFill(start_color='17a2b8', end_color='17a2b8', fill_type='solid')
                info_section.alignment = center_alignment
                for col in range(1, 8):
                    detail_ws.cell(row=current_row, column=col).border = thin_border

                current_row += 1

                # معلومات البرنامج في صفين
                program_info_row1 = [
                    ('رقم البرنامج:', program[1]),
                    ('اسم الدورة:', program[2]),
                    ('الفئة المستهدفة:', program[5])
                ]

                program_info_row2 = [
                    ('تاريخ البداية:', program[3]),
                    ('تاريخ النهاية:', program[4]),
                    ('تاريخ الأرشفة:', program[6] if len(program) > 6 else 'غير محدد')
                ]

                # الصف الأول من المعلومات
                col_idx = 1
                for label, value in program_info_row1:
                    label_cell = detail_ws.cell(row=current_row, column=col_idx)
                    label_cell.value = label
                    label_cell.font = Font(name='Arial', size=12, bold=True)
                    label_cell.fill = PatternFill(start_color='E8E8E8', end_color='E8E8E8', fill_type='solid')
                    label_cell.alignment = right_alignment
                    label_cell.border = thin_border

                    value_cell = detail_ws.cell(row=current_row, column=col_idx + 1)
                    value_cell.value = value
                    value_cell.font = Font(name='Arial', size=12)
                    value_cell.alignment = center_alignment
                    value_cell.border = thin_border

                    col_idx += 2

                current_row += 1

                # الصف الثاني من المعلومات
                col_idx = 1
                for label, value in program_info_row2:
                    label_cell = detail_ws.cell(row=current_row, column=col_idx)
                    label_cell.value = label
                    label_cell.font = Font(name='Arial', size=12, bold=True)
                    label_cell.fill = PatternFill(start_color='E8E8E8', end_color='E8E8E8', fill_type='solid')
                    label_cell.alignment = right_alignment
                    label_cell.border = thin_border

                    value_cell = detail_ws.cell(row=current_row, column=col_idx + 1)
                    value_cell.value = value
                    value_cell.font = Font(name='Arial', size=12)
                    value_cell.alignment = center_alignment
                    value_cell.border = thin_border

                    col_idx += 2

                current_row += 1

                # قائمة المدرسين
                current_row += 2
                detail_ws.merge_cells(f'A{current_row}:G{current_row}')
                teachers_title = detail_ws[f'A{current_row}']
                teachers_title.value = 'قائمة المدرسين المشاركين في البرنامج'
                teachers_title.font = Font(name='Arial', size=14, bold=True, color='FFFFFF')
                teachers_title.fill = PatternFill(start_color='28a745', end_color='28a745', fill_type='solid')
                teachers_title.alignment = center_alignment
                for col in range(1, 8):
                    detail_ws.cell(row=current_row, column=col).border = thin_border

                current_row += 1

                # رؤوس جدول المدرسين
                teacher_headers = ['م', 'اسم المدرس', 'الرتبة', 'رقم الهوية', 'جهة العمل', 'الفئة', 'عدد الحصص']
                for col, header in enumerate(teacher_headers, 1):
                    cell = detail_ws.cell(row=current_row, column=col)
                    cell.value = header
                    cell.font = header_font
                    cell.fill = header_fill
                    cell.alignment = center_alignment
                    cell.border = thin_border

                current_row += 1

                # بيانات المدرسين
                cursor.execute("""
                    SELECT DISTINCT t.name, t.rank, t.id_number, t.workplace, t.category,
                           COUNT(ps.id) as session_count
                    FROM teachers t
                    JOIN program_schedule ps ON t.id = ps.teacher_id
                    WHERE ps.program_id = ?
                    GROUP BY t.id
                    ORDER BY t.category, t.name
                """, (program_id,))

                teachers = cursor.fetchall()

                for idx, teacher in enumerate(teachers, 1):
                    teacher_data = [idx] + list(teacher)
                    for col, value in enumerate(teacher_data, 1):
                        cell = detail_ws.cell(row=current_row, column=col)
                        cell.value = value
                        cell.font = cell_font
                        cell.alignment = center_alignment if col == 1 else right_alignment
                        cell.border = thin_border
                        if current_row % 2 == 0:
                            cell.fill = PatternFill(start_color='F5F5F5', end_color='F5F5F5', fill_type='solid')
                    current_row += 1

                # ضبط عرض الأعمدة
                detail_widths = {
                    'A': 5,
                    'B': 25,
                    'C': 15,
                    'D': 15,
                    'E': 30,
                    'F': 15,
                    'G': 12
                }

                for col, width in detail_widths.items():
                    detail_ws.column_dimensions[col].width = width

            # حفظ الملف
            wb.save(file_path)
            messagebox.showinfo("نجاح", f"تم تصدير الأرشيف بنجاح\n{file_path}")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء التصدير: {str(e)}")

    def _show_program_details_window(self, program_id, readonly=False):
        """عرض تفاصيل البرنامج في نافذة (للأرشيف والعادي)"""
        detail_window = tk.Toplevel(self)
        detail_window.title("تفاصيل البرنامج التدريبي")
        detail_window.state('zoomed')
        detail_window.configure(bg=self.COLORS["background"])
        detail_window.transient(self)
        detail_window.grab_set()

        # الحصول على تفاصيل البرنامج
        cursor = self.db_conn.cursor()

        # التحقق من وجود الأعمدة
        cursor.execute("PRAGMA table_info(training_programs)")
        columns = [column[1] for column in cursor.fetchall()]

        # بناء الاستعلام حسب الأعمدة المتاحة
        base_query = """
            SELECT tp.program_number, cn.name, tp.start_date, tp.end_date, tp.category
        """

        extra_fields = []
        if 'has_classes' in columns:
            extra_fields.append("tp.has_classes")
        else:
            extra_fields.append("0 as has_classes")

        if 'classes_count' in columns:
            extra_fields.append("tp.classes_count")
        else:
            extra_fields.append("1 as classes_count")

        if 'is_archived' in columns:
            extra_fields.append("tp.is_archived")
        else:
            extra_fields.append("0 as is_archived")

        query = base_query + ", " + ", ".join(extra_fields) + """
            FROM training_programs tp
            LEFT JOIN course_names cn ON tp.course_name_id = cn.id
            WHERE tp.id = ?
        """

        cursor.execute(query, (program_id,))
        program = cursor.fetchone()

        if not program:
            messagebox.showerror("خطأ", "لم يتم العثور على البرنامج")
            detail_window.destroy()
            return

        has_classes = program[5] if len(program) > 5 else 0
        classes_count = program[6] if len(program) > 6 else 1
        is_archived = program[7] if len(program) > 7 else 0

        # حساب عدد الأسابيع
        from datetime import datetime
        start_date = datetime.strptime(program[2], "%Y-%m-%d")
        end_date = datetime.strptime(program[3], "%Y-%m-%d")
        weeks = ((end_date - start_date).days // 7) + 1

        # متغيرات للتحكم
        selected_week = tk.IntVar(value=1)
        selected_class = tk.IntVar(value=1)

        # شريط العنوان - نفس اللون الرسمي دائماً
        header_frame = tk.Frame(detail_window, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_text = f"البرنامج التدريبي: {program[0]} - {program[1]}"
        if is_archived == 1:
            title_text += " (مؤرشف)"

        title_label = tk.Label(
            header_content,
            text=title_text,
            font=("Tajawal", 24, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=20)

        # أزرار في الهيدر
        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.LEFT, pady=20)

        # زر تصدير للمدرس
        export_teacher_btn = tk.Button(
            buttons_container,
            text="تصدير للمدرس",
            font=("Tajawal", 14, "bold"),
            bg="#17a2b8",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_schedule_for_teacher(
                program_id,
                selected_week.get(),
                selected_class.get() if has_classes else 1
            )
        )
        export_teacher_btn.pack(side=tk.LEFT, padx=(0, 5))

        # زر تصدير عام
        export_general_btn = tk.Button(
            buttons_container,
            text="تصدير الجدول الكامل",
            font=("Tajawal", 14, "bold"),
            bg="#6c757d",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_general_schedule(
                program_id,
                selected_week.get(),
                selected_class.get() if has_classes else 1
            )
        )
        export_general_btn.pack(side=tk.LEFT, padx=(0, 5))

        # أزرار إدارة
        buttons_container2 = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container2.pack(side=tk.RIGHT, pady=20)

        # زر إدارة الجدول (فقط للبرامج غير المؤرشفة)
        if not readonly and is_archived != 1:
            manage_schedule_btn = tk.Button(
                buttons_container2,
                text="إدارة الجدول",
                font=("Tajawal", 14, "bold"),
                bg="#28a745",
                fg="white",
                padx=25,
                pady=8,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda: [detail_window.destroy(),
                                 self._manage_program_schedule(program_id, program[0], self)]
            )
            manage_schedule_btn.pack(side=tk.LEFT, padx=(0, 10))

        # زر الإغلاق
        close_btn = tk.Button(
            buttons_container2,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg="#dc3545",
            fg="white",
            padx=25,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=detail_window.destroy
        )
        close_btn.pack(side=tk.LEFT)

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(detail_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # إطار المعلومات الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        info_frame.pack(fill=tk.X, pady=(0, 10))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=20, pady=15)
        inner_info.pack(fill=tk.X)

        # معلومات البرنامج في صف واحد
        info_items = [
            ("رقم البرنامج:", program[0]),
            ("اسم الدورة:", program[1]),
            ("الفئة:", program[4]),
            ("من:", program[2]),
            ("إلى:", program[3]),
            ("عدد الأسابيع:", f"{weeks} أسابيع")
        ]

        if has_classes:
            info_items.append(("عدد الفصول:", f"{classes_count} فصول"))

        if is_archived == 1:
            info_items.append(("الحالة:", "مؤرشف"))

        for i, (label, value) in enumerate(info_items):
            item_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
            item_frame.pack(side=tk.LEFT, expand=True, padx=5)

            tk.Label(
                item_frame,
                text=label,
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["surface"],
                fg="#1E3A5F"
            ).pack(side=tk.LEFT)

            tk.Label(
                item_frame,
                text=value,
                font=("Tajawal", 12),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=(5, 0))

        # إطار المواد
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        subjects_frame.pack(fill=tk.X, pady=(0, 10))

        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"], padx=15, pady=10)
        subjects_container.pack(fill=tk.X)

        # عنوان المواد
        tk.Label(
            subjects_container,
            text="مواد البرنامج:",
            font=("Tajawal", 13, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # الحصول على المواد
        cursor.execute("""
            SELECT id, subject_name, subject_order 
            FROM program_subjects 
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # عرض المواد أفقياً
        for idx, subject in enumerate(subjects):
            if idx > 0:
                tk.Label(
                    subjects_container,
                    text=" | ",
                    font=("Tajawal", 13),
                    bg=self.COLORS["surface"],
                    fg="#999"
                ).pack(side=tk.LEFT)

            tk.Label(
                subjects_container,
                text=f"{subject[2]}. {subject[1]}",
                font=("Tajawal", 13),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=5)

        # إطار اختيار الأسبوع والفصل
        week_selector_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], height=50)
        week_selector_frame.pack(fill=tk.X, pady=(0, 10))
        week_selector_frame.pack_propagate(False)

        week_container = tk.Frame(week_selector_frame, bg=self.COLORS["surface"])
        week_container.pack(expand=True, fill=tk.BOTH, padx=20, pady=5)

        # اختيار الأسبوع
        tk.Label(
            week_container,
            text="اختر الأسبوع:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # إطار أزرار الأسابيع
        weeks_buttons_frame = tk.Frame(week_container, bg=self.COLORS["surface"])
        weeks_buttons_frame.pack(side=tk.LEFT)

        week_buttons = []

        def show_week_schedule(week_num):
            """عرض جدول أسبوع محدد"""
            selected_week.set(week_num)

            # تحديث ألوان الأزرار
            for i, btn in enumerate(week_buttons):
                if i + 1 == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            # تحديث عرض الجدول
            for widget in schedule_container.winfo_children():
                widget.destroy()
            self._create_schedule_view(
                schedule_container, program_id,
                week_number=week_num,
                class_number=selected_class.get() if has_classes else 1,
                readonly=True
            )

        # إنشاء أزرار الأسابيع
        for week in range(1, weeks + 1):
            week_btn = tk.Button(
                weeks_buttons_frame,
                text=f"أسبوع {week}",
                font=("Tajawal", 11, "bold"),
                bg="#E0E0E0" if week != 1 else "#1E3A5F",
                fg="black" if week != 1 else "white",
                width=9,
                height=1,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda w=week: show_week_schedule(w)
            )
            week_btn.pack(side=tk.LEFT, padx=3)
            week_buttons.append(week_btn)

            # تأثيرات hover
            def on_enter(e, btn=week_btn, week_num=week):
                if selected_week.get() != week_num:
                    btn.config(bg="#BDBDBD")

            def on_leave(e, btn=week_btn, week_num=week):
                if selected_week.get() == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            week_btn.bind("<Enter>", on_enter)
            week_btn.bind("<Leave>", on_leave)

        # قائمة منسدلة للفصول إن وجدت
        if has_classes:
            tk.Label(
                week_container,
                text=" | ",
                font=("Tajawal", 14),
                bg=self.COLORS["surface"],
                fg="#999"
            ).pack(side=tk.LEFT, padx=20)

            tk.Label(
                week_container,
                text="الفصل:",
                font=("Tajawal", 14, "bold"),
                bg=self.COLORS["surface"],
                fg="#FF6B35"
            ).pack(side=tk.LEFT, padx=(0, 10))

            class_names = [f"فصل {i}" for i in range(1, classes_count + 1)]

            class_combo = ttk.Combobox(
                week_container,
                values=class_names,
                font=("Tajawal", 12, "bold"),
                state="readonly",
                width=12
            )
            class_combo.current(0)
            class_combo.pack(side=tk.LEFT)

            def on_class_change(event):
                selected_text = class_combo.get()
                class_num = int(selected_text.split()[1])
                selected_class.set(class_num)

                for widget in schedule_container.winfo_children():
                    widget.destroy()
                self._create_schedule_view(
                    schedule_container, program_id,
                    week_number=selected_week.get(),
                    class_number=class_num,
                    readonly=True
                )

            class_combo.bind('<<ComboboxSelected>>', on_class_change)

        # خط فاصل
        separator = tk.Frame(main_frame, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول الدراسي
        schedule_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        schedule_frame.pack(fill=tk.BOTH, expand=True)

        schedule_header = tk.Frame(schedule_frame, bg="#1E3A5F", height=35)
        schedule_header.pack(fill=tk.X)
        schedule_header.pack_propagate(False)

        tk.Label(
            schedule_header,
            text="الجدول الدراسي",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack(expand=True)

        # إطار الجدول
        schedule_container = tk.Frame(schedule_frame, bg="white", padx=10, pady=10)
        schedule_container.pack(fill=tk.BOTH, expand=True)

        # عرض جدول الأسبوع الأول افتراضياً
        show_week_schedule(1)

    # 2. دالة إضافة برنامج تدريبي كاملة مع دعم الفصول
    def _add_training_program(self):
        """إضافة برنامج تدريبي جديد مع دعم المواد العامة والتخصصية والفصول المتعددة"""
        add_window = tk.Toplevel(self)
        add_window.title("تنفيذ برنامج تدريبي")
        add_window.state('zoomed')
        add_window.configure(bg=self.COLORS["background"])
        add_window.transient(self)
        add_window.grab_set()

        # شريط العنوان مع الأزرار
        header_frame = tk.Frame(add_window, bg="#1E3A5F", height=100)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_label = tk.Label(
            header_content,
            text="تنفيذ برنامج تدريبي جديد",
            font=("Tajawal", 28, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=25)

        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.RIGHT, pady=25)

        # دالة الحفظ
        def save_program():
            program_number = program_number_entry.get().strip()
            course_name = course_entry.get().strip()
            start_date = start_date_entry.get()
            end_date = end_date_entry.get()
            category = category_var.get()

            if not all([program_number, course_name, start_date, end_date]):
                messagebox.showwarning("تنبيه", "يرجى ملء جميع الحقول المطلوبة")
                return

            if course_name not in course_names:
                messagebox.showwarning("تنبيه", "يرجى اختيار دورة من القائمة أو إضافة دورة جديدة")
                return

            # جمع المواد العامة والتخصصية
            general_subjects = []
            specialized_subjects = []

            for i, (entry, category_type) in enumerate(subjects_entries):
                subject_name = entry.get().strip()
                if subject_name:
                    if category_type == "general":
                        general_subjects.append((subject_name, i + 1, "general"))
                    else:
                        specialized_subjects.append((subject_name, i + 1, "specialized"))

            all_subjects = general_subjects + specialized_subjects

            if not all_subjects:
                messagebox.showwarning("تنبيه", "يرجى إضافة مادة واحدة على الأقل")
                return

            # السؤال عن نوع الجدول
            schedule_type_response = messagebox.askyesno(
                "نوع الجدول",
                "هل البرنامج متعدد الجداول؟\n\n"
                "نعم = جدول مختلف لكل أسبوع\n"
                "لا = جدول واحد لجميع أسابيع البرنامج"
            )

            schedule_type = "multiple" if schedule_type_response else "single"

            # السؤال عن الفصول
            has_classes = False
            classes_count = 1

            classes_response = messagebox.askyesno(
                "الفصول",
                "هل البرنامج متعدد الفصول؟\n\n"
                "نعم = عدة فصول (مجموعات) في نفس البرنامج\n"
                "لا = فصل واحد فقط"
            )

            if classes_response:
                # نافذة لإدخال عدد الفصول
                classes_dialog = tk.Toplevel(add_window)
                classes_dialog.title("عدد الفصول")
                classes_dialog.geometry("400x200")
                classes_dialog.configure(bg=self.COLORS["surface"])
                classes_dialog.transient(add_window)
                classes_dialog.grab_set()

                # توسيط النافذة
                classes_dialog.update_idletasks()
                x = (classes_dialog.winfo_screenwidth() - 400) // 2
                y = (classes_dialog.winfo_screenheight() - 200) // 2
                classes_dialog.geometry(f"400x200+{x}+{y}")

                content = tk.Frame(classes_dialog, bg=self.COLORS["surface"], padx=30, pady=30)
                content.pack(fill=tk.BOTH, expand=True)

                tk.Label(
                    content,
                    text="كم عدد الفصول؟",
                    font=("Tajawal", 16, "bold"),
                    bg=self.COLORS["surface"]
                ).pack(pady=10)

                classes_var = tk.IntVar(value=2)
                classes_spinbox = tk.Spinbox(
                    content,
                    from_=2,
                    to=10,
                    textvariable=classes_var,
                    font=("Tajawal", 14),
                    width=10
                )
                classes_spinbox.pack(pady=10)

                result = {"confirmed": False, "count": 1}

                def confirm_classes():
                    result["confirmed"] = True
                    result["count"] = classes_var.get()
                    classes_dialog.destroy()

                tk.Button(
                    content,
                    text="تأكيد",
                    font=("Tajawal", 14, "bold"),
                    bg=self.COLORS["success"],
                    fg="white",
                    padx=30,
                    pady=8,
                    bd=0,
                    command=confirm_classes
                ).pack(pady=10)

                classes_dialog.wait_window()

                if result["confirmed"]:
                    has_classes = True
                    classes_count = result["count"]

            try:
                cursor = self.db_conn.cursor()

                cursor.execute("SELECT COUNT(*) FROM training_programs WHERE program_number = ?",
                               (program_number,))
                if cursor.fetchone()[0] > 0:
                    messagebox.showerror("خطأ", "رقم البرنامج موجود مسبقاً")
                    return

                course_id = course_ids.get(course_name)

                # التحقق من وجود الأعمدة الجديدة
                cursor.execute("PRAGMA table_info(training_programs)")
                columns = [column[1] for column in cursor.fetchall()]

                if 'has_classes' not in columns:
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN has_classes INTEGER DEFAULT 0")
                if 'classes_count' not in columns:
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN classes_count INTEGER DEFAULT 1")

                cursor.execute("""
                    INSERT INTO training_programs 
                    (program_number, course_name_id, start_date, end_date, category, 
                     created_date, schedule_type, has_classes, classes_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (program_number, course_id, start_date, end_date, category,
                      datetime.now().strftime("%Y-%m-%d %H:%M:%S"), schedule_type,
                      1 if has_classes else 0, classes_count))

                program_id = cursor.lastrowid

                # إضافة المواد مع تحديد النوع
                for subject_name, order, subject_category in all_subjects:
                    cursor.execute("""
                        INSERT INTO program_subjects (program_id, subject_name, subject_order, subject_category)
                        VALUES (?, ?, ?, ?)
                    """, (program_id, subject_name, order, subject_category))

                self.db_conn.commit()

                if schedule_type == "single":
                    if messagebox.askyesno("إنشاء الجدول", "هل تريد إنشاء الجدول الموحد الآن؟"):
                        add_window.destroy()
                        self._manage_program_schedule(program_id, program_number, self)
                    else:
                        messagebox.showinfo("نجاح", "تم إضافة البرنامج التدريبي بنجاح")
                        add_window.destroy()
                        self._load_training_programs()
                else:
                    messagebox.showinfo("نجاح", "تم إضافة البرنامج التدريبي بنجاح")
                    add_window.destroy()
                    self._load_training_programs()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # زر الحفظ
        save_btn = tk.Button(
            buttons_container,
            text="✓ حفظ",
            font=("Tajawal", 16, "bold"),
            bg="#28a745",
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=save_program
        )
        save_btn.pack(side=tk.LEFT, padx=(0, 10))

        save_btn.bind("<Enter>", lambda e: save_btn.config(bg="#218838"))
        save_btn.bind("<Leave>", lambda e: save_btn.config(bg="#28a745"))

        # زر الإلغاء
        cancel_btn = tk.Button(
            buttons_container,
            text="✕ إلغاء",
            font=("Tajawal", 16, "bold"),
            bg="#dc3545",
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=add_window.destroy
        )
        cancel_btn.pack(side=tk.LEFT)

        cancel_btn.bind("<Enter>", lambda e: cancel_btn.config(bg="#c82333"))
        cancel_btn.bind("<Leave>", lambda e: cancel_btn.config(bg="#dc3545"))

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(add_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=50, pady=30)

        # إطار الحقول الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        info_frame.pack(fill=tk.X, pady=(0, 30))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=50, pady=30)
        inner_info.pack(fill=tk.BOTH)

        inner_info.grid_columnconfigure(1, weight=1)
        inner_info.grid_columnconfigure(3, weight=1)

        label_font = ("Tajawal", 16, "bold")
        entry_font = ("Tajawal", 15)

        # رقم البرنامج
        tk.Label(
            inner_info,
            text="رقم البرنامج:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        program_number_entry = tk.Entry(inner_info, font=entry_font, width=25)
        program_number_entry.grid(row=0, column=1, sticky=tk.W, pady=15)

        # اسم الدورة مع البحث
        tk.Label(
            inner_info,
            text="اسم الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        # الحصول على مسميات الدورات
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT id, name FROM course_names WHERE is_active = 1 ORDER BY name")
        courses = cursor.fetchall()
        course_names = [course[1] for course in courses] if courses else ["لا توجد دورات مسجلة"]
        course_ids = {course[1]: course[0] for course in courses}

        # إطار للدورة
        course_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
        course_frame.grid(row=0, column=3, sticky=tk.W, pady=15)

        course_var = tk.StringVar(master=add_window)

        # Entry للبحث
        course_entry = tk.Entry(course_frame, font=entry_font, width=35)
        course_entry.pack(side=tk.LEFT)

        # إطار للاقتراحات
        suggestions_frame = tk.Frame(add_window, bg="white", relief=tk.RAISED, bd=1)

        def update_suggestions(event=None):
            """تحديث قائمة الاقتراحات"""
            typed_text = course_entry.get().lower()

            if not typed_text:
                suggestions_frame.place_forget()
                return

            filtered = [name for name in course_names if typed_text in name.lower()]

            if not filtered:
                suggestions_frame.place_forget()
                return

            for widget in suggestions_frame.winfo_children():
                widget.destroy()

            for i, suggestion in enumerate(filtered[:10]):
                btn = tk.Button(
                    suggestions_frame,
                    text=suggestion,
                    font=entry_font,
                    bg="white",
                    fg="black",
                    bd=0,
                    anchor=tk.W,
                    padx=10,
                    pady=5,
                    cursor="hand2",
                    command=lambda s=suggestion: select_course(s)
                )
                btn.pack(fill=tk.X)

                btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#e3f2fd"))
                btn.bind("<Leave>", lambda e, b=btn: b.config(bg="white"))

            course_entry.update_idletasks()
            x = course_entry.winfo_rootx()
            y = course_entry.winfo_rooty() + course_entry.winfo_height()
            suggestions_frame.place(x=x, y=y, width=course_entry.winfo_width())

        def select_course(course_name):
            """اختيار دورة من الاقتراحات"""
            course_entry.delete(0, tk.END)
            course_entry.insert(0, course_name)
            course_var.set(course_name)
            suggestions_frame.place_forget()
            # تحديث المواد التخصصية المتاحة
            update_available_subjects()

        course_entry.bind('<KeyRelease>', update_suggestions)
        course_entry.bind('<FocusOut>', lambda e: add_window.after(200, suggestions_frame.place_forget))

        # زر إضافة
        tk.Button(
            course_frame,
            text="+",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["secondary"],
            fg="white",
            bd=0,
            width=3,
            cursor="hand2",
            command=lambda: self._quick_add_course_name(add_window, course_entry, course_names)
        ).pack(side=tk.LEFT, padx=(5, 0))

        # التواريخ
        tk.Label(
            inner_info,
            text="تاريخ البداية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        from tkcalendar import DateEntry
        start_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        start_date_entry.grid(row=1, column=1, sticky=tk.W, pady=15)

        tk.Label(
            inner_info,
            text="تاريخ النهاية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        end_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        end_date_entry.grid(row=1, column=3, sticky=tk.W, pady=15)

        # فئة الدورة
        tk.Label(
            inner_info,
            text="فئة الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=2, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        category_var = tk.StringVar(master=add_window, value=categories[0])
        category_combo = ttk.Combobox(
            inner_info,
            textvariable=category_var,
            values=categories,
            font=entry_font,
            width=20,
            state="readonly"
        )
        category_combo.grid(row=2, column=1, sticky=tk.W, pady=15)

        # متغيرات لتخزين المواد المتاحة
        available_general_subjects = []
        available_specialized_subjects = []

        def update_available_subjects():
            """تحديث قوائم المواد المتاحة"""
            nonlocal available_general_subjects, available_specialized_subjects

            cursor = self.db_conn.cursor()

            # المواد العامة
            cursor.execute("SELECT subject_name FROM general_subjects ORDER BY subject_name")
            available_general_subjects = [s[0] for s in cursor.fetchall()]

            # المواد التخصصية للدورة المحددة
            course_name = course_entry.get().strip()
            if course_name:
                cursor.execute("""
                    SELECT subject_name FROM specialized_subjects 
                    WHERE course_name = ? 
                    ORDER BY subject_name
                """, (course_name,))
                available_specialized_subjects = [s[0] for s in cursor.fetchall()]
            else:
                available_specialized_subjects = []

        # إطار المواد
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        subjects_frame.pack(fill=tk.BOTH, expand=True)

        # عنوان المواد
        subjects_header = tk.Frame(subjects_frame, bg="#1E3A5F", height=60)
        subjects_header.pack(fill=tk.X)
        subjects_header.pack_propagate(False)

        header_content_frame = tk.Frame(subjects_header, bg="#1E3A5F")
        header_content_frame.pack(expand=True)

        tk.Label(
            header_content_frame,
            text="مواد البرنامج التدريبي",
            font=("Tajawal", 20, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack()

        # إطار أزرار إضافة المواد
        add_subjects_frame = tk.Frame(subjects_frame, bg=self.COLORS["surface"])
        add_subjects_frame.pack(fill=tk.X, padx=30, pady=15)

        tk.Button(
            add_subjects_frame,
            text="+ إضافة مادة عامة",
            font=("Tajawal", 14, "bold"),
            bg="#FF9800",
            fg="white",
            bd=0,
            padx=20,
            pady=10,
            cursor="hand2",
            command=lambda: add_subject("general")
        ).pack(side=tk.LEFT, padx=(0, 10))

        tk.Button(
            add_subjects_frame,
            text="+ إضافة مادة تخصصية",
            font=("Tajawal", 14, "bold"),
            bg="#9C27B0",
            fg="white",
            bd=0,
            padx=20,
            pady=10,
            cursor="hand2",
            command=lambda: add_subject("specialized")
        ).pack(side=tk.LEFT)

        # إطار قابل للتمرير للمواد
        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"])
        subjects_container.pack(fill=tk.BOTH, expand=True, padx=30, pady=(0, 20))

        # Canvas للتمرير
        canvas = tk.Canvas(subjects_container, bg=self.COLORS["surface"], highlightthickness=0)
        scrollbar = ttk.Scrollbar(subjects_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.COLORS["surface"])

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        subjects_entries = []

        def add_subject(category_type="general"):
            """إضافة مادة جديدة"""
            update_available_subjects()

            subject_frame = tk.Frame(scrollable_frame, bg=self.COLORS["surface"], pady=8)
            subject_frame.pack(fill=tk.X, padx=20)

            num = len(subjects_entries) + 1

            # لون مختلف حسب نوع المادة
            color = "#FF9800" if category_type == "general" else "#9C27B0"

            num_label = tk.Label(
                subject_frame,
                text=f"المادة {num}:",
                font=("Tajawal", 15, "bold"),
                bg=self.COLORS["surface"],
                fg=color,
                width=10
            )
            num_label.pack(side=tk.LEFT, padx=(0, 15))

            # نوع المادة
            type_label = tk.Label(
                subject_frame,
                text=f"({category_type == 'general' and 'عامة' or 'تخصصية'})",
                font=("Tajawal", 12),
                bg=self.COLORS["surface"],
                fg=color
            )
            type_label.pack(side=tk.LEFT, padx=(0, 15))

            # إطار الإدخال
            entry_frame = tk.Frame(subject_frame, bg=self.COLORS["surface"])
            entry_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 15))

            subject_entry = tk.Entry(
                entry_frame,
                font=("Tajawal", 14),
                width=50
            )
            subject_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

            # إطار الاقتراحات للمادة
            subject_suggestions_frame = tk.Frame(add_window, bg="white", relief=tk.RAISED, bd=1)

            def update_subject_suggestions(event=None):
                """تحديث اقتراحات المواد"""
                typed_text = subject_entry.get().lower()

                # اختيار القائمة المناسبة
                if category_type == "general":
                    available_subjects = available_general_subjects
                else:
                    available_subjects = available_specialized_subjects

                if not typed_text or not available_subjects:
                    subject_suggestions_frame.place_forget()
                    return

                filtered = [name for name in available_subjects if typed_text in name.lower()]

                if not filtered:
                    subject_suggestions_frame.place_forget()
                    return

                for widget in subject_suggestions_frame.winfo_children():
                    widget.destroy()

                for i, suggestion in enumerate(filtered[:10]):
                    btn = tk.Button(
                        subject_suggestions_frame,
                        text=suggestion,
                        font=("Tajawal", 13),
                        bg="white",
                        fg="black",
                        bd=0,
                        anchor=tk.W,
                        padx=10,
                        pady=5,
                        cursor="hand2",
                        command=lambda s=suggestion: select_subject(s)
                    )
                    btn.pack(fill=tk.X)

                    btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#e3f2fd"))
                    btn.bind("<Leave>", lambda e, b=btn: b.config(bg="white"))

                subject_entry.update_idletasks()
                x = subject_entry.winfo_rootx()
                y = subject_entry.winfo_rooty() + subject_entry.winfo_height()
                subject_suggestions_frame.place(x=x, y=y, width=subject_entry.winfo_width())

            def select_subject(subject_name):
                """اختيار مادة من الاقتراحات"""
                subject_entry.delete(0, tk.END)
                subject_entry.insert(0, subject_name)
                subject_suggestions_frame.place_forget()

            subject_entry.bind('<KeyRelease>', update_subject_suggestions)
            subject_entry.bind('<FocusOut>', lambda e: add_window.after(200, subject_suggestions_frame.place_forget))

            def remove_this():
                subject_frame.destroy()
                # إزالة من القائمة مع الحفاظ على النوع
                for i, (entry, cat_type) in enumerate(subjects_entries):
                    if entry == subject_entry:
                        subjects_entries.pop(i)
                        break
                # إعادة ترقيم المواد
                for i, (entry, cat_type) in enumerate(subjects_entries):
                    parent = entry.master.master
                    label = parent.winfo_children()[0]
                    label.config(text=f"المادة {i + 1}:")

            remove_btn = tk.Button(
                subject_frame,
                text="حذف",
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["danger"],
                fg="white",
                bd=0,
                padx=15,
                pady=8,
                cursor="hand2",
                command=remove_this
            )
            remove_btn.pack(side=tk.RIGHT)

            subjects_entries.append((subject_entry, category_type))
            canvas.update_idletasks()
            canvas.yview_moveto(1.0)

        # إضافة مادة واحدة عامة افتراضياً
        add_subject("general")

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # تحديث المواد المتاحة عند بدء النافذة
        update_available_subjects()

    def _quick_add_course_name(self, parent_window, combo_widget, courses_list):
        """إضافة مسمى دورة سريع"""
        dialog = tk.Toplevel(parent_window)
        dialog.title("إضافة مسمى دورة")
        dialog.geometry("400x200")
        dialog.configure(bg=self.COLORS["surface"])
        dialog.transient(parent_window)
        dialog.grab_set()

        # توسيط النافذة
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() - 400) // 2
        y = (dialog.winfo_screenheight() - 200) // 2
        dialog.geometry(f"400x200+{x}+{y}")

        # المحتوى
        content = tk.Frame(dialog, bg=self.COLORS["surface"], padx=30, pady=30)
        content.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content,
            text="اسم الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(anchor=tk.W, pady=(0, 10))

        name_entry = tk.Entry(content, font=self.FONTS["text"], width=35)
        name_entry.pack(fill=tk.X, pady=(0, 20))
        name_entry.focus_set()

        def save_course():
            name = name_entry.get().strip()
            if not name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم الدورة")
                return

            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    INSERT INTO course_names (name, description, created_date)
                    VALUES (?, '', ?)
                """, (name, datetime.now().strftime("%Y-%m-%d")))

                self.db_conn.commit()

                # تحديث القائمة
                courses_list.append(name)
                combo_widget['values'] = courses_list
                combo_widget.set(name)

                dialog.destroy()
                messagebox.showinfo("نجاح", "تم إضافة مسمى الدورة بنجاح")

            except sqlite3.IntegrityError:
                messagebox.showerror("خطأ", "اسم الدورة موجود مسبقاً")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # الأزرار
        btn_frame = tk.Frame(content, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X)

        tk.Button(
            btn_frame,
            text="حفظ",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=20,
            pady=8,
            cursor="hand2",
            command=save_course
        ).pack(side=tk.LEFT)

        tk.Button(
            btn_frame,
            text="إلغاء",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=20,
            pady=8,
            cursor="hand2",
            command=dialog.destroy
        ).pack(side=tk.RIGHT)

        # ربط Enter للحفظ
        name_entry.bind('<Return>', lambda e: save_course())

    def _load_training_programs(self):
        """تحميل البرامج التدريبية"""
        # مسح البيانات الحالية
        for item in self.programs_tree.get_children():
            self.programs_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            # التحقق من وجود عمود is_archived
            cursor.execute("PRAGMA table_info(training_programs)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'is_archived' in columns:
                # استخدام العمود إذا كان موجوداً
                cursor.execute("""
                    SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category,
                           (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    WHERE COALESCE(tp.is_archived, 0) = 0
                    ORDER BY tp.start_date DESC
                """)
            else:
                # عرض جميع البرامج إذا لم يكن العمود موجوداً
                cursor.execute("""
                    SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category,
                           (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    ORDER BY tp.start_date DESC
                """)

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                # إزالة id من البيانات المعروضة
                display_data = program[1:]  # تخطي id
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                item = self.programs_tree.insert("", tk.END, values=display_data,
                                                 tags=(tag, f"id_{program[0]}"))

            # تحديث العداد
            if hasattr(self, 'program_count_label'):
                self.program_count_label.config(text=f"إجمالي البرامج التدريبية: {len(programs)}")

        except Exception as e:
            print(f"خطأ في تحميل البرامج: {e}")
            # في حالة الخطأ، حاول تحميل البرامج بدون فلتر
            try:
                cursor.execute("""
                    SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category,
                           (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    ORDER BY tp.start_date DESC
                """)

                programs = cursor.fetchall()

                for index, program in enumerate(programs):
                    display_data = program[1:]
                    tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                    item = self.programs_tree.insert("", tk.END, values=display_data,
                                                     tags=(tag, f"id_{program[0]}"))

                if hasattr(self, 'program_count_label'):
                    self.program_count_label.config(text=f"إجمالي البرامج التدريبية: {len(programs)}")

            except Exception as e2:
                print(f"خطأ نهائي في تحميل البرامج: {e2}")

    def _search_programs(self):
        """البحث في البرامج التدريبية"""
        search_text = self.program_search_entry.get().strip()

        # مسح الجدول
        for item in self.programs_tree.get_children():
            self.programs_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            if search_text:
                cursor.execute("""
                    SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category,
                           (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    WHERE tp.program_number LIKE ? OR cn.name LIKE ?
                    ORDER BY tp.start_date DESC
                """, (f'%{search_text}%', f'%{search_text}%'))
            else:
                self._load_training_programs()
                return

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                display_data = program[1:]
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                item = self.programs_tree.insert("", tk.END, values=display_data,
                                                 tags=(tag, f"id_{program[0]}"))

        except Exception as e:
            print(f"خطأ في البحث: {e}")

    # 1. تحديث دالة _show_program_details لتمرير رقم الفصل عند التصدير
    def _show_program_details(self, event):
        """عرض تفاصيل البرنامج التدريبي مع الجدول - مع تمرير الفصل للتصدير"""
        selection = self.programs_tree.selection()
        if not selection:
            return

        # الحصول على id البرنامج من tags
        item = self.programs_tree.item(selection[0])
        tags = item['tags']
        program_id = None
        for tag in tags:
            if tag.startswith('id_'):
                program_id = int(tag.split('_')[1])
                break

        if not program_id:
            return

        # نافذة التفاصيل - ملء الشاشة
        detail_window = tk.Toplevel(self)
        detail_window.title("تفاصيل البرنامج التدريبي والجدول")
        detail_window.state('zoomed')
        detail_window.configure(bg=self.COLORS["background"])
        detail_window.transient(self)
        detail_window.grab_set()

        # الحصول على تفاصيل البرنامج
        cursor = self.db_conn.cursor()

        # التحقق من وجود الأعمدة
        cursor.execute("PRAGMA table_info(training_programs)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'has_classes' in columns and 'classes_count' in columns:
            cursor.execute("""
                SELECT tp.program_number, cn.name, tp.start_date, tp.end_date, tp.category,
                       tp.has_classes, tp.classes_count
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))
        else:
            cursor.execute("""
                SELECT tp.program_number, cn.name, tp.start_date, tp.end_date, tp.category
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))

        program = cursor.fetchone()

        has_classes = program[5] if len(program) > 5 else 0
        classes_count = program[6] if len(program) > 6 else 1

        # حساب عدد الأسابيع
        from datetime import datetime
        start_date = datetime.strptime(program[2], "%Y-%m-%d")
        end_date = datetime.strptime(program[3], "%Y-%m-%d")
        weeks = ((end_date - start_date).days // 7) + 1

        # متغيرات للتحكم
        selected_week = tk.IntVar(value=1)
        selected_class = tk.IntVar(value=1)

        # شريط العنوان
        header_frame = tk.Frame(detail_window, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_label = tk.Label(
            header_content,
            text=f"البرنامج التدريبي: {program[0]} - {program[1]}",
            font=("Tajawal", 24, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=20)

        # أزرار في الهيدر
        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.LEFT, pady=20)

        # زر تصدير للمدرس مع دعم الفصول
        export_teacher_btn = tk.Button(
            buttons_container,
            text="تصدير للمدرس",
            font=("Tajawal", 14, "bold"),
            bg="#17a2b8",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_schedule_for_teacher(
                program_id,
                selected_week.get(),
                selected_class.get() if has_classes else 1
            )
        )
        export_teacher_btn.pack(side=tk.LEFT, padx=(0, 5))

        # زر تصدير عام مع دعم الفصول
        export_general_btn = tk.Button(
            buttons_container,
            text="تصدير الجدول الكامل",
            font=("Tajawal", 14, "bold"),
            bg="#6c757d",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_general_schedule(
                program_id,
                selected_week.get(),
                selected_class.get() if has_classes else 1
            )
        )
        export_general_btn.pack(side=tk.LEFT, padx=(0, 5))

        # أزرار إدارة
        buttons_container2 = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container2.pack(side=tk.RIGHT, pady=20)

        # زر إدارة الجدول
        manage_schedule_btn = tk.Button(
            buttons_container2,
            text="إدارة الجدول",
            font=("Tajawal", 14, "bold"),
            bg="#28a745",
            fg="white",
            padx=25,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._manage_program_schedule(program_id, program[0], detail_window)
        )
        manage_schedule_btn.pack(side=tk.LEFT, padx=(0, 10))

        # زر الإغلاق
        close_btn = tk.Button(
            buttons_container2,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg="#dc3545",
            fg="white",
            padx=25,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=detail_window.destroy
        )
        close_btn.pack(side=tk.LEFT)

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(detail_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # إطار المعلومات الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        info_frame.pack(fill=tk.X, pady=(0, 10))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=20, pady=15)
        inner_info.pack(fill=tk.X)

        # معلومات البرنامج في صف واحد
        info_items = [
            ("رقم البرنامج:", program[0]),
            ("اسم الدورة:", program[1]),
            ("الفئة:", program[4]),
            ("من:", program[2]),
            ("إلى:", program[3]),
            ("عدد الأسابيع:", f"{weeks} أسابيع")
        ]

        if has_classes:
            info_items.append(("عدد الفصول:", f"{classes_count} فصول"))

        for i, (label, value) in enumerate(info_items):
            item_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
            item_frame.pack(side=tk.LEFT, expand=True, padx=5)

            tk.Label(
                item_frame,
                text=label,
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["surface"],
                fg="#1E3A5F"
            ).pack(side=tk.LEFT)

            tk.Label(
                item_frame,
                text=value,
                font=("Tajawal", 12),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=(5, 0))

        # إطار المواد - أفقي بسيط
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        subjects_frame.pack(fill=tk.X, pady=(0, 10))

        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"], padx=15, pady=10)
        subjects_container.pack(fill=tk.X)

        # عنوان المواد
        tk.Label(
            subjects_container,
            text="مواد البرنامج:",
            font=("Tajawal", 13, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # الحصول على المواد
        cursor.execute("""
            SELECT id, subject_name, subject_order 
            FROM program_subjects 
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # عرض المواد أفقياً
        for idx, subject in enumerate(subjects):
            if idx > 0:
                # فاصل بين المواد
                tk.Label(
                    subjects_container,
                    text=" | ",
                    font=("Tajawal", 13),
                    bg=self.COLORS["surface"],
                    fg="#999"
                ).pack(side=tk.LEFT)

            # المادة
            tk.Label(
                subjects_container,
                text=f"{subject[2]}. {subject[1]}",
                font=("Tajawal", 13),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=5)

        # إطار اختيار الأسبوع والفصل
        week_selector_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], height=50)
        week_selector_frame.pack(fill=tk.X, pady=(0, 10))
        week_selector_frame.pack_propagate(False)

        week_container = tk.Frame(week_selector_frame, bg=self.COLORS["surface"])
        week_container.pack(expand=True, fill=tk.BOTH, padx=20, pady=5)

        # اختيار الأسبوع
        tk.Label(
            week_container,
            text="اختر الأسبوع:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # إطار أزرار الأسابيع
        weeks_buttons_frame = tk.Frame(week_container, bg=self.COLORS["surface"])
        weeks_buttons_frame.pack(side=tk.LEFT)

        week_buttons = []

        def show_week_schedule(week_num):
            """عرض جدول أسبوع محدد"""
            selected_week.set(week_num)

            # تحديث ألوان الأزرار
            for i, btn in enumerate(week_buttons):
                if i + 1 == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            # تحديث عرض الجدول
            for widget in schedule_container.winfo_children():
                widget.destroy()
            self._create_schedule_view(
                schedule_container, program_id,
                week_number=week_num,
                class_number=selected_class.get() if has_classes else 1,
                readonly=True
            )

        # إنشاء أزرار الأسابيع
        for week in range(1, weeks + 1):
            week_btn = tk.Button(
                weeks_buttons_frame,
                text=f"أسبوع {week}",
                font=("Tajawal", 11, "bold"),
                bg="#E0E0E0" if week != 1 else "#1E3A5F",
                fg="black" if week != 1 else "white",
                width=9,
                height=1,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda w=week: show_week_schedule(w)
            )
            week_btn.pack(side=tk.LEFT, padx=3)
            week_buttons.append(week_btn)

            # تأثيرات hover
            def on_enter(e, btn=week_btn, week_num=week):
                if selected_week.get() != week_num:
                    btn.config(bg="#BDBDBD")

            def on_leave(e, btn=week_btn, week_num=week):
                if selected_week.get() == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            week_btn.bind("<Enter>", on_enter)
            week_btn.bind("<Leave>", on_leave)

        # قائمة منسدلة للفصول إن وجدت
        if has_classes:
            # إضافة فاصل
            tk.Label(
                week_container,
                text=" | ",
                font=("Tajawal", 14),
                bg=self.COLORS["surface"],
                fg="#999"
            ).pack(side=tk.LEFT, padx=20)

            # عنوان الفصل
            tk.Label(
                week_container,
                text="الفصل:",
                font=("Tajawal", 14, "bold"),
                bg=self.COLORS["surface"],
                fg="#FF6B35"
            ).pack(side=tk.LEFT, padx=(0, 10))

            # قائمة منسدلة للفصول
            class_names = [f"فصل {i}" for i in range(1, classes_count + 1)]

            class_combo = ttk.Combobox(
                week_container,
                values=class_names,
                font=("Tajawal", 12, "bold"),
                state="readonly",
                width=12
            )
            class_combo.current(0)
            class_combo.pack(side=tk.LEFT)

            def on_class_change(event):
                """عند تغيير الفصل"""
                selected_text = class_combo.get()
                class_num = int(selected_text.split()[1])
                selected_class.set(class_num)

                # تحديث عرض الجدول
                for widget in schedule_container.winfo_children():
                    widget.destroy()
                self._create_schedule_view(
                    schedule_container, program_id,
                    week_number=selected_week.get(),
                    class_number=class_num,
                    readonly=True
                )

            class_combo.bind('<<ComboboxSelected>>', on_class_change)

        # خط فاصل
        separator = tk.Frame(main_frame, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول الدراسي - ملء المساحة المتبقية
        schedule_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        schedule_frame.pack(fill=tk.BOTH, expand=True)

        schedule_header = tk.Frame(schedule_frame, bg="#1E3A5F", height=35)
        schedule_header.pack(fill=tk.X)
        schedule_header.pack_propagate(False)

        tk.Label(
            schedule_header,
            text="الجدول الدراسي",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack(expand=True)

        # إطار الجدول
        schedule_container = tk.Frame(schedule_frame, bg="white", padx=10, pady=10)
        schedule_container.pack(fill=tk.BOTH, expand=True)

        # عرض جدول الأسبوع الأول افتراضياً
        show_week_schedule(1)

    # تحديث دالة _create_schedule_view لإصلاح مشكلة parent_window
    def _create_schedule_view(self, parent_frame, program_id, week_number=1, class_number=1, readonly=False):
        """إنشاء عرض الجدول الدراسي مع دعم الفصول ونسخ مباشر مع التحقق من التعارض"""
        # التحقق من نوع الجدول
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT schedule_type FROM training_programs WHERE id = ?", (program_id,))
        result = cursor.fetchone()
        schedule_type = result[0] if result and result[0] else "multiple"

        # إذا كان الجدول موحد، نستخدم الأسبوع 1 دائماً للبيانات
        if schedule_type == "single":
            data_week = 1
        else:
            data_week = week_number

        # أيام الأسبوع
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        # الحصول على أوقات الحصص
        cursor.execute("""
            SELECT period_number, start_time, end_time
            FROM default_periods
            WHERE is_break = 0
            ORDER BY period_number
        """)
        periods = cursor.fetchall()

        # إطار رئيسي للتوسيط
        center_frame = tk.Frame(parent_frame, bg=self.COLORS["background"])
        center_frame.pack(fill=tk.BOTH, expand=True)

        # إطار الجدول
        table_frame = tk.Frame(center_frame, bg="white", relief=tk.GROOVE, bd=2)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # عكس ترتيب الأعمدة للعربية - الأيام على اليمين
        col_index = len(periods)

        # خلية الأسبوع والفصل في الزاوية اليمنى العليا
        week_text = f"الأسبوع {week_number}"
        if class_number > 1:
            week_text += f"\nفصل {class_number}"

        week_label = tk.Label(
            table_frame,
            text=week_text,
            font=("Tajawal", 14, "bold"),
            bg="#F5F5F5",
            fg="black",
            relief=tk.GROOVE,
            bd=1,
            width=12
        )
        week_label.grid(row=0, column=col_index, sticky="nsew", rowspan=2)

        # عناوين الحصص (من اليمين لليسار)
        for idx, period in enumerate(periods):
            col = col_index - idx - 1

            # الحصة
            period_label = tk.Label(
                table_frame,
                text=f"الحصة {period[0]}",
                font=("Tajawal", 12, "bold"),
                bg="#F5F5F5",
                fg="black",
                relief=tk.GROOVE,
                bd=1
            )
            period_label.grid(row=0, column=col, sticky="nsew")

            # الوقت
            time_label = tk.Label(
                table_frame,
                text=f"{period[1]} - {period[2]}",
                font=("Tajawal", 10),
                bg="#FAFAFA",
                fg="#555555",
                relief=tk.GROOVE,
                bd=1
            )
            time_label.grid(row=1, column=col, sticky="nsew")

        # التحقق من وجود الأعمدة المطلوبة
        cursor.execute("PRAGMA table_info(program_schedule)")
        columns = [column[1] for column in cursor.fetchall()]
        has_subject_type = 'subject_type' in columns
        has_class_number = 'class_number' in columns

        # الحصول على بيانات الجدول
        if has_class_number:
            if has_subject_type:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           ps.subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ? AND ps.class_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, data_week, class_number))
            else:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           'نظري' as subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ? AND ps.class_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, data_week, class_number))
        else:
            if has_subject_type:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           ps.subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, data_week))
            else:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           'نظري' as subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, data_week))

        schedule_data = {}
        for row in cursor.fetchall():
            day = row[0]
            period = row[1]
            schedule_data[(day, period)] = {
                'subject_id': row[2],
                'teacher_id': row[3],
                'teacher_name': row[4],
                'subject': row[5],
                'teacher_db': row[6],
                'subject_type': row[7] if len(row) > 7 else 'نظري'
            }

        # دالة النسخ المباشر للحصة التالية مع التحقق من التعارض
        def copy_to_next_period(from_day, from_period):
            """نسخ مباشر إلى الحصة التالية مع التحقق من التعارض"""
            # تعريف cursor في بداية الدالة
            cursor = self.db_conn.cursor()

            # الحصول على البيانات المراد نسخها
            source_data = schedule_data.get((from_day, from_period))
            if not source_data or not source_data.get('subject'):
                messagebox.showwarning("تنبيه", "لا توجد بيانات للنسخ في هذه الخانة")
                return

            # تحديد الحصة التالية
            next_period = from_period + 1

            # التحقق من وجود حصة تالية
            if next_period > len(periods):
                messagebox.showinfo("تنبيه", "لا توجد حصة تالية في نفس اليوم")
                return

            # التحقق من التعارض إذا كان هناك مدرس
            if source_data.get('teacher_id'):
                # الحصول على معلومات المدرس
                cursor.execute("SELECT name, id_number FROM teachers WHERE id = ?", (source_data['teacher_id'],))
                teacher_info = cursor.fetchone()

                # استخدام دالة التحقق من التعارض مع دعم الفصول
                has_conflict, conflict_details = self._check_teacher_conflict(
                    source_data['teacher_id'],
                    program_id,
                    data_week,
                    from_day,
                    next_period,
                    class_number
                )

                if has_conflict:
                    # بناء رسالة التعارض
                    conflict_msg = "❌ لا يمكن نسخ هذا المدرس للحصة التالية بسبب تعارض:\n\n"

                    if teacher_info:
                        conflict_msg += f"المدرس: {teacher_info[0]}\n"
                        conflict_msg += f"رقم الهوية: {teacher_info[1]}\n\n"

                    conflict_msg += "التعارضات:\n"
                    for conflict in conflict_details:
                        conflict_msg += f"• البرنامج: {conflict['program_number']}\n"
                        if 'class_number' in conflict and conflict['class_number'] > 1:
                            conflict_msg += f"  الفصل: {conflict['class_number']}\n"
                        conflict_msg += f"  الدورة: {conflict['course_name']}\n"
                        conflict_msg += f"  المادة: {conflict['subject_name']}\n"
                        conflict_msg += f"  التاريخ: {conflict['date']}\n\n"

                    conflict_msg += "⚠️ نفس رقم الهوية لا يمكن أن يتواجد في مكانين في نفس الوقت."

                    messagebox.showerror("تعارض في الجدول", conflict_msg)
                    return

            try:
                cursor = self.db_conn.cursor()

                # الحصول على معلومات وقت الحصة التالية
                cursor.execute("""
                    SELECT start_time, end_time FROM default_periods
                    WHERE period_number = ?
                """, (next_period,))
                time_info = cursor.fetchone()

                if time_info:
                    # التحقق من وجود عمود class_number
                    cursor.execute("PRAGMA table_info(program_schedule)")
                    columns = [column[1] for column in cursor.fetchall()]

                    if 'class_number' in columns:
                        # نسخ البيانات مباشرة مع رقم الفصل
                        cursor.execute("""
                            INSERT OR REPLACE INTO program_schedule
                            (program_id, week_number, day_of_week, period_number,
                             start_time, end_time, subject_id, teacher_id,
                             subject_type, is_break, teacher_name, class_number)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)
                        """, (
                            program_id, data_week, from_day, next_period,
                            time_info[0], time_info[1],
                            source_data['subject_id'],
                            source_data['teacher_id'],
                            source_data.get('subject_type', 'نظري'),
                            source_data['teacher_name'],
                            class_number
                        ))
                    else:
                        # نسخ البيانات بدون رقم الفصل للتوافقية
                        cursor.execute("""
                            INSERT OR REPLACE INTO program_schedule
                            (program_id, week_number, day_of_week, period_number,
                             start_time, end_time, subject_id, teacher_id,
                             subject_type, is_break, teacher_name)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?)
                        """, (
                            program_id, data_week, from_day, next_period,
                            time_info[0], time_info[1],
                            source_data['subject_id'],
                            source_data['teacher_id'],
                            source_data.get('subject_type', 'نظري'),
                            source_data['teacher_name']
                        ))

                    self.db_conn.commit()

                    # إعادة تحميل الجدول فوراً
                    for widget in center_frame.winfo_children():
                        widget.destroy()
                    self._create_schedule_view(center_frame, program_id, week_number=week_number,
                                               class_number=class_number,
                                               readonly=readonly)

                    messagebox.showinfo("نجاح", "تم النسخ إلى الحصة التالية بنجاح")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء النسخ: {str(e)}")

        # الحصول على النافذة الأصلية من parent_frame
        parent_window = parent_frame.winfo_toplevel()

        # صفوف الأيام
        for row_idx, day_name in enumerate(days):
            # اسم اليوم في العمود الأيمن
            day_label = tk.Label(
                table_frame,
                text=day_name,
                font=("Tajawal", 12, "bold"),
                bg="#F5F5F5",
                fg="black",
                relief=tk.GROOVE,
                bd=1,
                height=2
            )
            day_label.grid(row=row_idx + 2, column=col_index, sticky="nsew")

            # خلايا الحصص لكل يوم (من اليمين لليسار)
            for idx, period in enumerate(periods):
                col = col_index - idx - 1
                period_num = period[0]
                cell_data = schedule_data.get((row_idx, period_num), {})

                # إطار الخلية
                cell = tk.Frame(table_frame, bg="white", relief=tk.GROOVE, bd=1)
                cell.grid(row=row_idx + 2, column=col, sticky="nsew", padx=0, pady=0)

                if cell_data.get('subject'):
                    # عرض المادة
                    subject_label = tk.Label(
                        cell,
                        text=cell_data['subject'],
                        font=("Tajawal", 11, "bold"),
                        bg="white",
                        fg="black",
                        wraplength=140,
                        justify=tk.RIGHT
                    )
                    subject_label.pack(pady=(5, 2))

                    # نوع المادة
                    subject_type = cell_data.get('subject_type', 'نظري')
                    type_color = "#2196F3" if subject_type == "عملي" else "#4CAF50"

                    type_label = tk.Label(
                        cell,
                        text=f"({subject_type})",
                        font=("Tajawal", 9, "bold"),
                        bg="white",
                        fg=type_color
                    )
                    type_label.pack(pady=(0, 2))

                    # خط فاصل
                    separator = tk.Frame(cell, bg="#E0E0E0", height=1)
                    separator.pack(fill=tk.X, padx=15, pady=1)

                    # عرض المدرس
                    if cell_data.get('teacher_name'):
                        teacher_text = cell_data['teacher_name']
                    elif cell_data.get('teacher_db'):
                        teacher_text = cell_data['teacher_db']
                    else:
                        teacher_text = "لم يحدد"

                    teacher_label = tk.Label(
                        cell,
                        text=teacher_text,
                        font=("Tajawal", 9),
                        bg="white",
                        fg="#555555",
                        wraplength=140,
                        justify=tk.RIGHT
                    )
                    teacher_label.pack(pady=(1, 5))

                    if not readonly and (schedule_type == "multiple" or week_number == 1):
                        # أزرار صغيرة للتعديل والحذف والنسخ
                        btn_frame = tk.Frame(cell, bg="white")
                        btn_frame.pack(pady=1)

                        # زر النسخ للحصة التالية (فقط إذا لم تكن الحصة الأخيرة)
                        if period_num < len(periods):
                            copy_btn = tk.Button(
                                btn_frame,
                                text="نسخ للتالية",
                                font=("Tajawal", 8),
                                bg="#17a2b8",
                                fg="white",
                                bd=0,
                                padx=8,
                                pady=2,
                                cursor="hand2",
                                command=lambda d=row_idx, p=period_num: copy_to_next_period(d, p)
                            )
                            copy_btn.pack(side=tk.RIGHT, padx=2)

                        edit_btn = tk.Button(
                            btn_frame,
                            text="تعديل",
                            font=("Tajawal", 8),
                            bg="#666666",
                            fg="white",
                            bd=0,
                            padx=8,
                            pady=2,
                            cursor="hand2",
                            command=lambda d=row_idx, p=period_num: self._show_assignment_options(
                                program_id, d, p, data_week, parent_window, class_number, edit_mode=True
                            )
                        )
                        edit_btn.pack(side=tk.RIGHT, padx=2)

                        delete_btn = tk.Button(
                            btn_frame,
                            text="حذف",
                            font=("Tajawal", 8),
                            bg="#999999",
                            fg="white",
                            bd=0,
                            padx=8,
                            pady=2,
                            cursor="hand2",
                            command=lambda d=row_idx, p=period_num: self._delete_schedule_slot(
                                program_id, d, p, data_week, class_number, center_frame
                            )
                        )
                        delete_btn.pack(side=tk.RIGHT, padx=2)

                elif not readonly and (schedule_type == "multiple" or week_number == 1):
                    # زر إضافة
                    add_btn = tk.Button(
                        cell,
                        text="+ إضافة",
                        font=("Tajawal", 10),
                        bg="#F5F5F5",
                        fg="#666666",
                        bd=0,
                        cursor="hand2",
                        relief=tk.FLAT,
                        command=lambda d=row_idx, p=period_num: self._show_assignment_options(
                            program_id, d, p, data_week, parent_window, class_number
                        )
                    )
                    add_btn.pack(expand=True, fill=tk.BOTH, padx=15, pady=20)

                    # تأثير عند المرور
                    add_btn.bind("<Enter>", lambda e, btn=add_btn: btn.config(bg="#E0E0E0"))
                    add_btn.bind("<Leave>", lambda e, btn=add_btn: btn.config(bg="#F5F5F5"))

                # تكوين ارتفاع الصف
                table_frame.grid_rowconfigure(row_idx + 2, minsize=100)

            # تكوين أحجام الأعمدة
            table_frame.grid_columnconfigure(col_index, minsize=100)  # عمود الأيام
            for col in range(len(periods)):
                table_frame.grid_columnconfigure(col, minsize=180, weight=1)

            # إذا كان الجدول موحد، عرض ملاحظة
            if schedule_type == "single" and week_number != 1 and not readonly:
                note_label = tk.Label(
                    center_frame,
                    text="ملاحظة: هذا البرنامج يستخدم جدول موحد لجميع الأسابيع",
                    font=("Tajawal", 12),
                    bg=self.COLORS["background"],
                    fg="#FF6B6B"
                )
                note_label.pack(pady=(0, 10))

    def _check_teacher_conflict(self, teacher_id, program_id, week_number, day_index, period_number, class_number=1):
        """التحقق من تعارض جدول المدرس باستخدام رقم الهوية - مع دعم البرامج متعددة الجداول"""
        cursor = self.db_conn.cursor()

        # الحصول على رقم هوية المدرس
        cursor.execute("SELECT id_number, name FROM teachers WHERE id = ?", (teacher_id,))
        teacher_info = cursor.fetchone()

        if not teacher_info:
            return False, None

        teacher_id_number = teacher_info[0]  # رقم الهوية
        teacher_name = teacher_info[1]

        # الحصول على معلومات البرنامج الحالي
        cursor.execute("""
            SELECT start_date, end_date, schedule_type 
            FROM training_programs 
            WHERE id = ?
        """, (program_id,))

        current_program_info = cursor.fetchone()
        from datetime import datetime, timedelta

        current_start = datetime.strptime(current_program_info[0], "%Y-%m-%d")
        current_end = datetime.strptime(current_program_info[1], "%Y-%m-%d")
        current_schedule_type = current_program_info[2] if len(current_program_info) > 2 else "multiple"

        # حساب التاريخ الفعلي للحصة في البرنامج الحالي
        actual_date = current_start + timedelta(weeks=week_number - 1, days=day_index)

        conflicts_found = []

        # التحقق من وجود الأعمدة المطلوبة
        cursor.execute("PRAGMA table_info(program_schedule)")
        columns = [column[1] for column in cursor.fetchall()]
        has_class_number = 'class_number' in columns

        cursor.execute("PRAGMA table_info(training_programs)")
        tp_columns = [column[1] for column in cursor.fetchall()]
        has_is_archived = 'is_archived' in tp_columns
        has_schedule_type = 'schedule_type' in tp_columns

        # البحث عن جميع البرامج النشطة في نفس التاريخ
        query = """
            SELECT DISTINCT tp.id, tp.program_number, tp.start_date, tp.end_date
        """

        if has_schedule_type:
            query += ", tp.schedule_type"
        else:
            query += ", 'multiple' as schedule_type"

        query += """
            FROM training_programs tp
            WHERE tp.id != ?
        """

        if has_is_archived:
            query += " AND COALESCE(tp.is_archived, 0) = 0"

        query += " AND date(?) BETWEEN date(tp.start_date) AND date(tp.end_date)"

        cursor.execute(query, (program_id, actual_date.strftime("%Y-%m-%d")))
        active_programs = cursor.fetchall()

        # التحقق من التعارضات في كل برنامج نشط
        for active_program in active_programs:
            other_program_id = active_program[0]
            other_program_number = active_program[1]
            other_start = datetime.strptime(active_program[2], "%Y-%m-%d")
            other_end = datetime.strptime(active_program[3], "%Y-%m-%d")
            other_schedule_type = active_program[4]

            # حساب رقم الأسبوع في البرنامج الآخر
            days_diff = (actual_date - other_start).days
            other_week_number = (days_diff // 7) + 1

            # التحقق من وجود تعارض في البرنامج الآخر
            conflict_query = """
                SELECT ps.id, psub.subject_name, ps.class_number
                FROM program_schedule ps
                LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                JOIN teachers t ON ps.teacher_id = t.id
                WHERE ps.program_id = ?
                AND ps.day_of_week = ?
                AND ps.period_number = ?
                AND t.id_number = ?
            """

            # إضافة شرط الأسبوع حسب نوع الجدول
            if other_schedule_type == "single":
                # للجدول الموحد، نتحقق من الأسبوع 1 فقط
                conflict_query += " AND ps.week_number = 1"
                cursor.execute(conflict_query,
                               (other_program_id, day_index, period_number, teacher_id_number))
            else:
                # للجدول المتعدد، نتحقق من الأسبوع المحدد
                conflict_query += " AND ps.week_number = ?"
                cursor.execute(conflict_query,
                               (other_program_id, day_index, period_number, teacher_id_number, other_week_number))

            conflict = cursor.fetchone()

            if conflict:
                # الحصول على اسم الدورة
                cursor.execute("""
                    SELECT cn.name 
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    WHERE tp.id = ?
                """, (other_program_id,))
                course_info = cursor.fetchone()

                conflict_dict = {
                    'program_id': other_program_id,
                    'program_number': other_program_number,
                    'course_name': course_info[0] if course_info else "غير محدد",
                    'week_number': other_week_number,
                    'subject_name': conflict[1] if conflict[1] else "غير محدد",
                    'date': actual_date.strftime("%Y-%m-%d"),
                    'day': day_index,
                    'period': period_number,
                    'class_number': conflict[2] if has_class_number and len(conflict) > 2 else 1
                }
                conflicts_found.append(conflict_dict)

        # التحقق من التعارضات للجهات (teacher_name)
        for active_program in active_programs:
            other_program_id = active_program[0]
            other_program_number = active_program[1]
            other_start = datetime.strptime(active_program[2], "%Y-%m-%d")
            other_schedule_type = active_program[4]

            # حساب رقم الأسبوع في البرنامج الآخر
            days_diff = (actual_date - other_start).days
            other_week_number = (days_diff // 7) + 1

            # التحقق من التعارض للجهات
            entity_query = """
                SELECT ps.id, psub.subject_name, ps.class_number
                FROM program_schedule ps
                LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                WHERE ps.program_id = ?
                AND ps.day_of_week = ?
                AND ps.period_number = ?
                AND ps.teacher_name = ?
                AND ps.teacher_id IS NULL
            """

            if other_schedule_type == "single":
                entity_query += " AND ps.week_number = 1"
                cursor.execute(entity_query,
                               (other_program_id, day_index, period_number, teacher_name))
            else:
                entity_query += " AND ps.week_number = ?"
                cursor.execute(entity_query,
                               (other_program_id, day_index, period_number, teacher_name, other_week_number))

            entity_conflict = cursor.fetchone()

            if entity_conflict:
                cursor.execute("""
                    SELECT cn.name 
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    WHERE tp.id = ?
                """, (other_program_id,))
                course_info = cursor.fetchone()

                conflict_dict = {
                    'program_id': other_program_id,
                    'program_number': other_program_number,
                    'course_name': course_info[0] if course_info else "غير محدد",
                    'week_number': other_week_number,
                    'subject_name': entity_conflict[1] if entity_conflict[1] else "غير محدد",
                    'date': actual_date.strftime("%Y-%m-%d"),
                    'day': day_index,
                    'period': period_number,
                    'class_number': entity_conflict[2] if has_class_number and len(entity_conflict) > 2 else 1,
                    'is_entity': True
                }
                conflicts_found.append(conflict_dict)

        if conflicts_found:
            return True, conflicts_found

        return False, None

    # 7. دالة تعيين مدرس ومادة مع دعم الفصول (تحديث للدالة الأصلية)
    def _assign_teacher_subject(self, program_id, day_index, period_number, week_number, class_number, parent_window):
        """تعيين مدرس ومادة مع قيود المواد التخصصية ودعم الفصول"""
        assign_window = tk.Toplevel(parent_window)
        assign_window.title("إضافة مدرس ومادة")
        assign_window.geometry("700x800")
        assign_window.configure(bg=self.COLORS["surface"])
        assign_window.transient(parent_window)
        assign_window.grab_set()

        # توسيط النافذة
        assign_window.update_idletasks()
        x = (assign_window.winfo_screenwidth() - 700) // 2
        y = (assign_window.winfo_screenheight() - 800) // 2
        assign_window.geometry(f"700x800+{x}+{y}")

        # العنوان
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT start_time, end_time FROM default_periods
            WHERE period_number = ?
        """, (period_number,))
        time_info = cursor.fetchone()

        header_text = f"الأسبوع {week_number} - {days[day_index]}\nالحصة {period_number} ({time_info[0]} - {time_info[1]})"
        if class_number > 1:
            header_text += f"\nفصل {class_number}"

        header = tk.Label(
            assign_window,
            text=header_text,
            font=("Tajawal", 16, "bold"),
            bg="#2196F3",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content = tk.Frame(assign_window, bg=self.COLORS["surface"], padx=30, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        # الحصول على اسم الدورة
        cursor.execute("""
            SELECT cn.name 
            FROM training_programs tp
            JOIN course_names cn ON tp.course_name_id = cn.id
            WHERE tp.id = ?
        """, (program_id,))
        course_info = cursor.fetchone()
        course_name = course_info[0] if course_info else None

        # اختيار المادة
        tk.Label(
            content,
            text="اختر المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        # الحصول على المواد مع تصنيفها
        cursor.execute("""
            SELECT id, subject_name, subject_order, subject_category
            FROM program_subjects
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # متغير لحفظ معرف المادة المختارة
        selected_subject_id = tk.IntVar(value=0)
        selected_subject_category = tk.StringVar(value="general")

        subject_combo = ttk.Combobox(
            content,
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )

        # إنشاء قائمة المواد مع تصنيفها
        subject_list = []
        subject_map = {}

        for i, (sid, sname, sorder, scategory) in enumerate(subjects):
            category_text = " (عامة)" if scategory == "general" else " (تخصصية)"
            text = f"{sorder}. {sname}{category_text}"
            subject_list.append(text)
            subject_map[i] = (sid, scategory or "general")

        subject_combo['values'] = subject_list
        subject_combo.pack(fill=tk.X, pady=(0, 20))

        # اختيار أول مادة افتراضياً
        if subject_list:
            subject_combo.current(0)
            selected_subject_id.set(subject_map[0][0])
            selected_subject_category.set(subject_map[0][1])

        # عند تغيير المادة
        def on_subject_change(event):
            index = subject_combo.current()
            if index >= 0:
                selected_subject_id.set(subject_map[index][0])
                selected_subject_category.set(subject_map[index][1])
                # تحديث قائمة المدرسين بناءً على نوع المادة
                update_teachers_list()

        subject_combo.bind('<<ComboboxSelected>>', on_subject_change)

        # نوع المادة (عملي/نظري)
        tk.Label(
            content,
            text="نوع المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        subject_type_combo = ttk.Combobox(
            content,
            values=["نظري", "عملي"],
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )
        subject_type_combo.current(0)
        subject_type_combo.pack(fill=tk.X, pady=(0, 30))

        # إطار خاص بالمدرسين
        teacher_frame = tk.Frame(content, bg=self.COLORS["surface"])
        teacher_frame.pack(fill=tk.BOTH, expand=True)

        # متغير لحفظ معرف المدرس المختار
        selected_teacher_id = tk.IntVar(value=0)
        teachers_map = {}

        # تسمية ديناميكية للمدرسين
        teacher_label = tk.Label(
            teacher_frame,
            text="",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        )
        teacher_label.pack(anchor="w", pady=(0, 10))

        # إطار البحث
        search_frame = tk.Frame(teacher_frame, bg=self.COLORS["surface"])
        search_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            search_frame,
            text="البحث:",
            font=("Tajawal", 12),
            bg=self.COLORS["surface"]
        ).pack(side=tk.RIGHT, padx=(0, 10))

        search_entry = tk.Entry(
            search_frame,
            font=("Tajawal", 13),
            width=40
        )
        search_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)

        # قائمة المدرسين
        list_frame = tk.Frame(teacher_frame, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        teachers_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set,
            height=10,
            selectmode=tk.SINGLE
        )
        teachers_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=teachers_listbox.yview)

        def update_teachers_list():
            """تحديث قائمة المدرسين بناءً على نوع المادة"""
            # تحديد نوع المادة المختارة
            category = selected_subject_category.get()

            if category == "specialized":
                # للمواد التخصصية - فقط أعضاء هيئة التدريس
                teacher_label.config(
                    text="اختر المدرس من هيئة التدريس (مادة تخصصية):",
                    fg="#9C27B0"
                )
                load_faculty_teachers()
            else:
                # للمواد العامة - جميع المدرسين
                teacher_label.config(
                    text="اختر المدرس (مادة عامة):",
                    fg="#FF9800"
                )
                load_all_teachers()

        def load_faculty_teachers():
            """تحميل أعضاء هيئة التدريس فقط"""
            teachers_listbox.delete(0, tk.END)
            teachers_map.clear()

            search_text = search_entry.get().strip()

            try:
                cursor = self.db_conn.cursor()

                if search_text:
                    cursor.execute("""
                        SELECT DISTINCT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        INNER JOIN course_teacher_paths ctp ON t.id = ctp.teacher_id
                        WHERE ctp.course_name = ? AND LOWER(t.name) LIKE LOWER(?)
                        ORDER BY t.name
                    """, (course_name, f'%{search_text}%'))
                else:
                    cursor.execute("""
                        SELECT DISTINCT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        INNER JOIN course_teacher_paths ctp ON t.id = ctp.teacher_id
                        WHERE ctp.course_name = ?
                        ORDER BY t.name
                    """, (course_name,))

                teachers = cursor.fetchall()

                if not teachers:
                    teachers_listbox.insert(tk.END, "لا يوجد أعضاء هيئة تدريس لهذه الدورة")
                    return

                for i, (tid, name, rank, workplace, category) in enumerate(teachers):
                    # الحصول على الدورات لكل مدرس
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ?
                    """, (tid,))

                    courses = [row[0] for row in cursor.fetchall()]

                    display_text = f"{rank} - {name}"
                    if courses:
                        display_text += f" (متخصص في: {', '.join(courses)})"

                    teachers_listbox.insert(tk.END, display_text)
                    teachers_map[i] = tid

            except Exception as e:
                print(f"خطأ في تحميل أعضاء هيئة التدريس: {e}")

        def load_all_teachers():
            """تحميل جميع المدرسين للمواد العامة"""
            teachers_listbox.delete(0, tk.END)
            teachers_map.clear()

            search_text = search_entry.get().strip()

            try:
                if search_text:
                    cursor.execute("""
                        SELECT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        WHERE LOWER(t.name) LIKE LOWER(?)
                        ORDER BY t.name
                        LIMIT 50
                    """, (f'%{search_text}%',))
                else:
                    cursor.execute("""
                        SELECT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        ORDER BY t.name
                        LIMIT 100
                    """)

                teachers = cursor.fetchall()

                for i, (tid, name, rank, workplace, category) in enumerate(teachers):
                    # الحصول على الدورات لكل مدرس
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ?
                    """, (tid,))

                    courses = [row[0] for row in cursor.fetchall()]

                    display_text = f"{rank} - {name}"
                    if courses:
                        display_text += f" (متخصص في: {', '.join(courses)})"

                    teachers_listbox.insert(tk.END, display_text)
                    teachers_map[i] = tid

            except Exception as e:
                print(f"خطأ في تحميل المدرسين: {e}")

        # عند الكتابة في البحث
        def on_search_change(*args):
            update_teachers_list()

        search_entry.bind('<KeyRelease>', on_search_change)

        # عند اختيار مدرس
        def on_teacher_select(event):
            selection = teachers_listbox.curselection()
            if selection:
                selected_teacher_id.set(teachers_map[selection[0]])

        teachers_listbox.bind('<<ListboxSelect>>', on_teacher_select)

        # تحميل القائمة الأولية
        update_teachers_list()

        # الأزرار
        btn_frame = tk.Frame(assign_window, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X, pady=20)

        def save():
            # التحقق من المادة
            if selected_subject_id.get() == 0:
                messagebox.showwarning("تنبيه", "يرجى اختيار المادة")
                return

            # التحقق من المدرس
            if selected_teacher_id.get() == 0:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس من القائمة")
                return

            # الحصول على معلومات المدرس المختار
            cursor.execute("SELECT name, id_number FROM teachers WHERE id = ?", (selected_teacher_id.get(),))
            teacher_info = cursor.fetchone()
            if teacher_info:
                teacher_name = teacher_info[0]
                teacher_id_number = teacher_info[1]
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات المدرس")
                return

            # التحقق الإضافي للمواد التخصصية
            if selected_subject_category.get() == "specialized":
                # التحقق من أن المدرس من هيئة التدريس
                cursor.execute("""
                    SELECT COUNT(*) FROM course_teacher_paths 
                    WHERE teacher_id = ? AND course_name = ?
                """, (selected_teacher_id.get(), course_name))

                if cursor.fetchone()[0] == 0:
                    messagebox.showerror(
                        "خطأ",
                        "لا يمكن تعيين هذا المدرس لمادة تخصصية!\n\n"
                        "المواد التخصصية محصورة على أعضاء هيئة التدريس فقط."
                    )
                    return

            # الحصول على نوع المادة
            selected_subject_type = subject_type_combo.get()

            # التحقق من التعارضات
            has_conflict, conflict_details = self._check_teacher_conflict(
                selected_teacher_id.get(),
                program_id,
                week_number,
                day_index,
                period_number,
                class_number
            )

            if has_conflict:
                # بناء رسالة التعارض
                conflict_msg = "❌ لا يمكن إضافة هذا المدرس بسبب وجود تعارضات:\n\n"
                conflict_msg += f"المدرس: {teacher_name} (رقم الهوية: {teacher_id_number})\n"
                conflict_msg += "لديه التزامات في نفس الوقت:\n\n"

                for conflict in conflict_details:
                    conflict_msg += f"🔴 البرنامج: {conflict['program_number']}\n"
                    if 'class_number' in conflict and conflict['class_number'] > 1:
                        conflict_msg += f"   الفصل: {conflict['class_number']}\n"
                    conflict_msg += f"   الدورة: {conflict['course_name']}\n"
                    conflict_msg += f"   المادة: {conflict['subject_name']}\n"
                    conflict_msg += f"   التاريخ: {conflict['date']}\n"
                    conflict_msg += f"   الوقت: {days[day_index]} - الحصة {period_number}\n\n"

                conflict_msg += "⚠️ ملاحظة: نفس رقم الهوية لا يمكن أن يتواجد في مكانين مختلفين في نفس الوقت.\n"
                conflict_msg += "يرجى اختيار مدرس آخر أو تغيير الوقت."

                messagebox.showerror("تعارض في الجدول", conflict_msg)
                return

            try:
                # التأكد من وجود الأعمدة المطلوبة
                cursor.execute("PRAGMA table_info(program_schedule)")
                columns = [column[1] for column in cursor.fetchall()]

                if 'subject_type' not in columns:
                    cursor.execute("ALTER TABLE program_schedule ADD COLUMN subject_type TEXT DEFAULT 'نظري'")
                    self.db_conn.commit()

                if 'class_number' not in columns:
                    cursor.execute("ALTER TABLE program_schedule ADD COLUMN class_number INTEGER DEFAULT 1")
                    self.db_conn.commit()

                # حفظ التعيين
                cursor.execute("""
                    INSERT OR REPLACE INTO program_schedule
                    (program_id, week_number, day_of_week, period_number,
                     start_time, end_time, subject_id, teacher_id, 
                     subject_type, is_break, teacher_name, class_number)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, NULL, ?)
                """, (program_id, week_number, day_index, period_number,
                      time_info[0], time_info[1], selected_subject_id.get(),
                      selected_teacher_id.get(), selected_subject_type, class_number))

                self.db_conn.commit()

                messagebox.showinfo(
                    "نجاح",
                    f"تم حفظ التعيين بنجاح\nنوع المادة: {selected_subject_type}"
                )

                assign_window.destroy()
                parent_window.destroy()
                self._manage_program_schedule(program_id, "", parent_window.master)

            except Exception as e:
                self.db_conn.rollback()
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        btn_container = tk.Frame(btn_frame, bg=self.COLORS["surface"])
        btn_container.pack()

        tk.Button(
            btn_container,
            text="حفظ",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=save
        ).pack(side=tk.LEFT, padx=10)

        tk.Button(
            btn_container,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=assign_window.destroy
        ).pack(side=tk.LEFT, padx=10)
